{"version":3,"sources":["Chart.Core.js","Chart.Radar.js","chart.js"],"names":["root","this","previous","Chart","context","canvas","ctx","computeDimension","element","dimension","document","defaultView","getComputedStyle","getPropertyValue","width","height","aspectRatio","helpers","retinaScale","defaults","global","animation","animationSteps","animationEasing","showScale","scaleOverride","scaleSteps","scaleStepWidth","scaleStartValue","scaleLineColor","scaleLineWidth","scaleShowLabels","scaleLabel","scaleIntegersOnly","scaleBeginAtZero","scaleFontFamily","scaleFontSize","scaleFontStyle","scaleFontColor","responsive","maintainAspectRatio","showTooltips","customTooltips","tooltipEvents","tooltipFillColor","tooltipFontFamily","tooltipFontSize","tooltipFontStyle","tooltipFontColor","tooltipTitleFontFamily","tooltipTitleFontSize","tooltipTitleFontStyle","tooltipTitleFontColor","tooltipTitleTemplate","tooltipYPadding","tooltipXPadding","tooltipCaretSize","tooltipCornerRadius","tooltipXOffset","tooltipTemplate","multiTooltipTemplate","multiTooltipKeyBackground","segmentColorDefault","segmentHighlightColorDefaults","onAnimationProgress","onAnimationComplete","types","id","timeout","each","loopable","callback","self","i","additionalArgs","Array","prototype","slice","call","arguments","length","apply","concat","item","clone","obj","objClone","value","key","hasOwnProperty","extend","base","extensionObject","merge","master","args","unshift","indexOf","arrayToSearch","inherits","where","collection","filterCallback","filtered","push","findNextWhere","startIndex","currentItem","findPreviousWhere","extensions","parent","ChartElement","constructor","Surrogate","__super__","noop","uid","warn","str","window","console","amd","define","isNumber","n","isNaN","parseFloat","isFinite","max","array","Math","min","getDecimalPlaces","cap","valueToCap","maxValue","minValue","num","s","toString","split","parseInt","parts","toRadians","radians","degrees","PI","aliasPixel","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","x","distanceFromYCenter","y","radialDistanceFromCenter","sqrt","angle","atan2","distance","pixelWidth","calculateOrderOfMagnitude","splineCurve","FirstPoint","MiddlePoint","AfterPoint","t","d01","pow","d12","fa","fb","inner","outer","val","floor","log","LN10","template","calculateScaleRange","valuesArray","drawingSize","textSize","startFromZero","integersOnly","maxSteps","skipFitting","values","v","valueRange","abs","rangeOrderOfMagnitude","graphMax","ceil","graphMin","graphRange","stepValue","numberOfSteps","round","steps","templateString","valuesObject","Function","data","fn","cache","test","replace","join","easingEffects","generateLabels","labelsArray","index","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","easeOutSine","sin","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","p","a","asin","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","addEvent","cancelAnimFrame","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","oCancelAnimationFrame","msCancelAnimationFrame","clearTimeout","animationLoop","totalSteps","easingString","onProgress","onComplete","chartInstance","currentStep","easingFunction","animationFrame","stepDecimal","easeDecimal","getRelativePosition","evt","mouseX","mouseY","e","originalEvent","boundingRect","currentTarget","srcElement","getBoundingClientRect","touches","clientX","left","clientY","top","node","eventType","method","addEventListener","attachEvent","removeEvent","handler","removeEventListener","detachEvent","unbindEvents","bindEvents","arrayOfEvents","events","eventName","chart","getMaximumWidth","domNode","container","parentNode","padding","getStyle","clientWidth","getMaximumHeight","clientHeight","el","property","currentStyle","getMaximumSize","devicePixelRatio","style","scale","clear","clearRect","fontString","pixelSize","fontStyle","fontFamily","longestText","font","arrayOfStrings","longest","string","textWidth","measureText","drawRoundedRectangle","radius","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","instances","Type","options","resize","initialize","stop","animationService","cancelAnimation","newWidth","newHeight","reflow","render","Animation","numSteps","easing","animationObject","draw","addAnimation","generateLegend","legendTemplate","destroy","removeProperty","removeAttribute","showTooltip","ChartElements","forceRedraw","activeElements","Elements","changed","datasets","dataArray","dataIndex","points","bars","segments","tooltipLabels","tooltipColors","medianPosition","dataCollection","xMax","yMax","xMin","yMin","xPositions","yPositions","dataset","hasValue","fill","_saved","fillColor","stroke","strokeColor","MultiTooltip","xPadding","yPadding","xOffset","textColor","fontSize","titleTextColor","titleFontFamily","titleFontStyle","titleFontSize","cornerRadius","labels","legendColors","legendColorBackground","title","custom","Element","tooltipPosition","Tooltip","caretHeight","text","toBase64Image","toDataURL","ChartType","name","chartName","baseDefaults","config","configuration","save","restore","props","update","newProps","transition","ease","Point","display","inRange","chartX","chartY","hitDetectionRange","hitDetectionRadius","arc","strokeStyle","lineWidth","strokeWidth","fillStyle","Arc","pointRelativePosition","pointRelativeAngle","startAngle","endAngle","betweenAngles","withinRadius","innerRadius","outerRadius","centreAngle","rangeFromCentre","animationPercent","lineJoin","showStroke","Rectangle","halfWidth","leftX","rightX","halfStroke","xAlign","yAlign","caretPadding","tooltipWidth","tooltipRectHeight","tooltipHeight","tooltipX","tooltipY","textAlign","textBaseline","fillText","titleFont","titleHeight","titleWidth","labelWidth","longestTextWidth","halfHeight","getLineHeight","baseLineHeight","afterTitleIndex","label","fillRect","Scale","fit","buildYLabels","yLabels","stepDecimalPlaces","toFixed","yLabelWidth","showLabels","addXLabel","xLabels","valuesCount","removeXLabel","shift","startPoint","endPoint","cachedYLabelWidth","cachedEndPoint","cachedHeight","calculateYRange","calculateXLabelRotation","firstRotated","firstWidth","lastWidth","xScalePaddingRight","xScalePaddingLeft","xLabelRotation","cosRotation","originalLabelWidth","xLabelWidth","xGridWidth","calculateX","drawingArea","calculateY","scalingFactor","valueWidth","valueOffset","offsetGridLines","yLabelGap","xStart","labelString","yLabelCenter","linePositionY","drawHorizontalLine","showHorizontalLines","gridLineWidth","gridLineColor","lineColor","xPos","linePos","isRotated","drawVerticalLine","showVerticalLines","translate","rotate","RadialScale","size","backdropPaddingY","calculateCenterOffset","lineArc","setScaleSize","getCircumference","pointPosition","halfTextWidth","furthestRightIndex","furthestRightAngle","furthestLeftIndex","furthestLeftAngle","xProtrusionLeft","xProtrusionRight","radiusReductionRight","radiusReductionLeft","largestPossibleRadius","pointLabelFontSize","furthestRight","furthestLeft","pointLabelFontStyle","pointLabelFontFamily","getPointPosition","getIndexAngle","setCenterPoint","leftMovement","rightMovement","maxRight","maxLeft","xCenter","yCenter","distanceFromCenter","thisAngle","yCenterOffset","yHeight","showLabelBackdrop","backdropColor","backdropPaddingX","fontColor","angleLineWidth","angleLineColor","centerOffset","outerPosition","angleLineInterval","backgroundColors","previousOuterPosition","nextOuterPosition","previousOuterHalfway","nextOuterHalfway","pointLabelPosition","pointLabelFontColor","labelsCount","halfLabelsCount","quarterLabelsCount","upperHalf","exactQuarter","frameDuration","animations","dropFrames","digestWrapper","animationWrapper","splice","startDigest","startTime","Date","now","framesToDrop","frameDelay","instance","module","exports","noConflict","scaleShowLine","angleShowLineOut","pointDot","pointDotRadius","pointDotStrokeWidth","pointHitDetectionRadius","datasetStroke","datasetStrokeWidth","datasetFill","PointClass","buildScale","activePointsCollection","type","getPointsAtEvent","eachPoints","point","activePoint","highlightFill","highlightStroke","datasetObject","pointColor","pointStrokeColor","dataPoint","datasetLabel","pointHighlightFill","pointHighlightStroke","mousePosition","fromCenter","anglePerIndex","pointIndex","scaleShowLabelBackdrop","scaleBackdropColor","scaleBackgroundColors","scaleBackdropPaddingY","scaleBackdropPaddingX","updateScaleRange","totalDataArray","scaleSizes","addData","datasetIndex","removeData","querySelectorAll","forEach","skill","getAttribute","bar","textContent","getElementById","getContext","Radar"],"mappings":"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","file":"vendor.43e9b011.js","sourcesContent":["/*!\n * Chart.js\n * http://chartjs.org/\n * Version: {{ version }}\n *\n * Copyright 2015 Nick Downie\n * Released under the MIT license\n * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md\n */\n\n\n(function(){\n\n\t\"use strict\";\n\n\t//Declare root variable - window in the browser, global on the server\n\tvar root = this,\n\t\tprevious = root.Chart;\n\n\t//Occupy the global variable of Chart, and create a simple base class\n\tvar Chart = function(context){\n\t\tvar chart = this;\n\t\tthis.canvas = context.canvas;\n\n\t\tthis.ctx = context;\n\n\t\t//Variables global to the chart\n\t\tvar computeDimension = function(element,dimension)\n\t\t{\n\t\t\tif (element['offset'+dimension])\n\t\t\t{\n\t\t\t\treturn element['offset'+dimension];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn document.defaultView.getComputedStyle(element).getPropertyValue(dimension);\n\t\t\t}\n\t\t};\n\n\t\tvar width = this.width = computeDimension(context.canvas,'Width') || context.canvas.width;\n\t\tvar height = this.height = computeDimension(context.canvas,'Height') || context.canvas.height;\n\n\t\tthis.aspectRatio = this.width / this.height;\n\t\t//High pixel density displays - multiply the size of the canvas height/width by the device pixel ratio, then scale.\n\t\thelpers.retinaScale(this);\n\n\t\treturn this;\n\t};\n\t//Globally expose the defaults to allow for user updating/changing\n\tChart.defaults = {\n\t\tglobal: {\n\t\t\t// Boolean - Whether to animate the chart\n\t\t\tanimation: true,\n\n\t\t\t// Number - Number of animation steps\n\t\t\tanimationSteps: 60,\n\n\t\t\t// String - Animation easing effect\n\t\t\tanimationEasing: \"easeOutQuart\",\n\n\t\t\t// Boolean - If we should show the scale at all\n\t\t\tshowScale: true,\n\n\t\t\t// Boolean - If we want to override with a hard coded scale\n\t\t\tscaleOverride: false,\n\n\t\t\t// ** Required if scaleOverride is true **\n\t\t\t// Number - The number of steps in a hard coded scale\n\t\t\tscaleSteps: null,\n\t\t\t// Number - The value jump in the hard coded scale\n\t\t\tscaleStepWidth: null,\n\t\t\t// Number - The scale starting value\n\t\t\tscaleStartValue: null,\n\n\t\t\t// String - Colour of the scale line\n\t\t\tscaleLineColor: \"rgba(0,0,0,.1)\",\n\n\t\t\t// Number - Pixel width of the scale line\n\t\t\tscaleLineWidth: 1,\n\n\t\t\t// Boolean - Whether to show labels on the scale\n\t\t\tscaleShowLabels: true,\n\n\t\t\t// Interpolated JS string - can access value\n\t\t\tscaleLabel: \"<%=value%>\",\n\n\t\t\t// Boolean - Whether the scale should stick to integers, and not show any floats even if drawing space is there\n\t\t\tscaleIntegersOnly: true,\n\n\t\t\t// Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value\n\t\t\tscaleBeginAtZero: false,\n\n\t\t\t// String - Scale label font declaration for the scale label\n\t\t\tscaleFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\n\t\t\t// Number - Scale label font size in pixels\n\t\t\tscaleFontSize: 12,\n\n\t\t\t// String - Scale label font weight style\n\t\t\tscaleFontStyle: \"normal\",\n\n\t\t\t// String - Scale label font colour\n\t\t\tscaleFontColor: \"#666\",\n\n\t\t\t// Boolean - whether or not the chart should be responsive and resize when the browser does.\n\t\t\tresponsive: false,\n\n\t\t\t// Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container\n\t\t\tmaintainAspectRatio: true,\n\n\t\t\t// Boolean - Determines whether to draw tooltips on the canvas or not - attaches events to touchmove & mousemove\n\t\t\tshowTooltips: true,\n\n\t\t\t// Boolean - Determines whether to draw built-in tooltip or call custom tooltip function\n\t\t\tcustomTooltips: false,\n\n\t\t\t// Array - Array of string names to attach tooltip events\n\t\t\ttooltipEvents: [\"mousemove\", \"touchstart\", \"touchmove\", \"mouseout\"],\n\n\t\t\t// String - Tooltip background colour\n\t\t\ttooltipFillColor: \"rgba(0,0,0,0.8)\",\n\n\t\t\t// String - Tooltip label font declaration for the scale label\n\t\t\ttooltipFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\n\t\t\t// Number - Tooltip label font size in pixels\n\t\t\ttooltipFontSize: 14,\n\n\t\t\t// String - Tooltip font weight style\n\t\t\ttooltipFontStyle: \"normal\",\n\n\t\t\t// String - Tooltip label font colour\n\t\t\ttooltipFontColor: \"#fff\",\n\n\t\t\t// String - Tooltip title font declaration for the scale label\n\t\t\ttooltipTitleFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\n\t\t\t// Number - Tooltip title font size in pixels\n\t\t\ttooltipTitleFontSize: 14,\n\n\t\t\t// String - Tooltip title font weight style\n\t\t\ttooltipTitleFontStyle: \"bold\",\n\n\t\t\t// String - Tooltip title font colour\n\t\t\ttooltipTitleFontColor: \"#fff\",\n\n\t\t\t// String - Tooltip title template\n\t\t\ttooltipTitleTemplate: \"<%= label%>\",\n\n\t\t\t// Number - pixel width of padding around tooltip text\n\t\t\ttooltipYPadding: 6,\n\n\t\t\t// Number - pixel width of padding around tooltip text\n\t\t\ttooltipXPadding: 6,\n\n\t\t\t// Number - Size of the caret on the tooltip\n\t\t\ttooltipCaretSize: 8,\n\n\t\t\t// Number - Pixel radius of the tooltip border\n\t\t\ttooltipCornerRadius: 6,\n\n\t\t\t// Number - Pixel offset from point x to tooltip edge\n\t\t\ttooltipXOffset: 10,\n\n\t\t\t// String - Template string for single tooltips\n\t\t\ttooltipTemplate: \"<%if (label){%><%=label%>: <%}%><%= value %>\",\n\n\t\t\t// String - Template string for single tooltips\n\t\t\tmultiTooltipTemplate: \"<%= datasetLabel %>: <%= value %>\",\n\n\t\t\t// String - Colour behind the legend colour block\n\t\t\tmultiTooltipKeyBackground: '#fff',\n\n\t\t\t// Array - A list of colors to use as the defaults\n\t\t\tsegmentColorDefault: [\"#A6CEE3\", \"#1F78B4\", \"#B2DF8A\", \"#33A02C\", \"#FB9A99\", \"#E31A1C\", \"#FDBF6F\", \"#FF7F00\", \"#CAB2D6\", \"#6A3D9A\", \"#B4B482\", \"#B15928\" ],\n\n\t\t\t// Array - A list of highlight colors to use as the defaults\n\t\t\tsegmentHighlightColorDefaults: [ \"#CEF6FF\", \"#47A0DC\", \"#DAFFB2\", \"#5BC854\", \"#FFC2C1\", \"#FF4244\", \"#FFE797\", \"#FFA728\", \"#F2DAFE\", \"#9265C2\", \"#DCDCAA\", \"#D98150\" ],\n\n\t\t\t// Function - Will fire on animation progression.\n\t\t\tonAnimationProgress: function(){},\n\n\t\t\t// Function - Will fire on animation completion.\n\t\t\tonAnimationComplete: function(){}\n\n\t\t}\n\t};\n\n\t//Create a dictionary of chart types, to allow for extension of existing types\n\tChart.types = {};\n\n\t//Global Chart helpers object for utility methods and classes\n\tvar helpers = Chart.helpers = {};\n\n\t\t//-- Basic js utility methods\n\tvar each = helpers.each = function(loopable,callback,self){\n\t\t\tvar additionalArgs = Array.prototype.slice.call(arguments, 3);\n\t\t\t// Check to see if null or undefined firstly.\n\t\t\tif (loopable){\n\t\t\t\tif (loopable.length === +loopable.length){\n\t\t\t\t\tvar i;\n\t\t\t\t\tfor (i=0; i<loopable.length; i++){\n\t\t\t\t\t\tcallback.apply(self,[loopable[i], i].concat(additionalArgs));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfor (var item in loopable){\n\t\t\t\t\t\tcallback.apply(self,[loopable[item],item].concat(additionalArgs));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tclone = helpers.clone = function(obj){\n\t\t\tvar objClone = {};\n\t\t\teach(obj,function(value,key){\n\t\t\t\tif (obj.hasOwnProperty(key)){\n\t\t\t\t\tobjClone[key] = value;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn objClone;\n\t\t},\n\t\textend = helpers.extend = function(base){\n\t\t\teach(Array.prototype.slice.call(arguments,1), function(extensionObject) {\n\t\t\t\teach(extensionObject,function(value,key){\n\t\t\t\t\tif (extensionObject.hasOwnProperty(key)){\n\t\t\t\t\t\tbase[key] = value;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn base;\n\t\t},\n\t\tmerge = helpers.merge = function(base,master){\n\t\t\t//Merge properties in left object over to a shallow clone of object right.\n\t\t\tvar args = Array.prototype.slice.call(arguments,0);\n\t\t\targs.unshift({});\n\t\t\treturn extend.apply(null, args);\n\t\t},\n\t\tindexOf = helpers.indexOf = function(arrayToSearch, item){\n\t\t\tif (Array.prototype.indexOf) {\n\t\t\t\treturn arrayToSearch.indexOf(item);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor (var i = 0; i < arrayToSearch.length; i++) {\n\t\t\t\t\tif (arrayToSearch[i] === item) return i;\n\t\t\t\t}\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t},\n\t\twhere = helpers.where = function(collection, filterCallback){\n\t\t\tvar filtered = [];\n\n\t\t\thelpers.each(collection, function(item){\n\t\t\t\tif (filterCallback(item)){\n\t\t\t\t\tfiltered.push(item);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn filtered;\n\t\t},\n\t\tfindNextWhere = helpers.findNextWhere = function(arrayToSearch, filterCallback, startIndex){\n\t\t\t// Default to start of the array\n\t\t\tif (!startIndex){\n\t\t\t\tstartIndex = -1;\n\t\t\t}\n\t\t\tfor (var i = startIndex + 1; i < arrayToSearch.length; i++) {\n\t\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\t\tif (filterCallback(currentItem)){\n\t\t\t\t\treturn currentItem;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tfindPreviousWhere = helpers.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex){\n\t\t\t// Default to end of the array\n\t\t\tif (!startIndex){\n\t\t\t\tstartIndex = arrayToSearch.length;\n\t\t\t}\n\t\t\tfor (var i = startIndex - 1; i >= 0; i--) {\n\t\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\t\tif (filterCallback(currentItem)){\n\t\t\t\t\treturn currentItem;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tinherits = helpers.inherits = function(extensions){\n\t\t\t//Basic javascript inheritance based on the model created in Backbone.js\n\t\t\tvar parent = this;\n\t\t\tvar ChartElement = (extensions && extensions.hasOwnProperty(\"constructor\")) ? extensions.constructor : function(){ return parent.apply(this, arguments); };\n\n\t\t\tvar Surrogate = function(){ this.constructor = ChartElement;};\n\t\t\tSurrogate.prototype = parent.prototype;\n\t\t\tChartElement.prototype = new Surrogate();\n\n\t\t\tChartElement.extend = inherits;\n\n\t\t\tif (extensions) extend(ChartElement.prototype, extensions);\n\n\t\t\tChartElement.__super__ = parent.prototype;\n\n\t\t\treturn ChartElement;\n\t\t},\n\t\tnoop = helpers.noop = function(){},\n\t\tuid = helpers.uid = (function(){\n\t\t\tvar id=0;\n\t\t\treturn function(){\n\t\t\t\treturn \"chart-\" + id++;\n\t\t\t};\n\t\t})(),\n\t\twarn = helpers.warn = function(str){\n\t\t\t//Method for warning of errors\n\t\t\tif (window.console && typeof window.console.warn === \"function\") console.warn(str);\n\t\t},\n\t\tamd = helpers.amd = (typeof define === 'function' && define.amd),\n\t\t//-- Math methods\n\t\tisNumber = helpers.isNumber = function(n){\n\t\t\treturn !isNaN(parseFloat(n)) && isFinite(n);\n\t\t},\n\t\tmax = helpers.max = function(array){\n\t\t\treturn Math.max.apply( Math, array );\n\t\t},\n\t\tmin = helpers.min = function(array){\n\t\t\treturn Math.min.apply( Math, array );\n\t\t},\n\t\tcap = helpers.cap = function(valueToCap,maxValue,minValue){\n\t\t\tif(isNumber(maxValue)) {\n\t\t\t\tif( valueToCap > maxValue ) {\n\t\t\t\t\treturn maxValue;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(isNumber(minValue)){\n\t\t\t\tif ( valueToCap < minValue ){\n\t\t\t\t\treturn minValue;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn valueToCap;\n\t\t},\n\t\tgetDecimalPlaces = helpers.getDecimalPlaces = function(num){\n\t\t\tif (num%1!==0 && isNumber(num)){\n\t\t\t\tvar s = num.toString();\n\t\t\t\tif(s.indexOf(\"e-\") < 0){\n\t\t\t\t\t// no exponent, e.g. 0.01\n\t\t\t\t\treturn s.split(\".\")[1].length;\n\t\t\t\t}\n\t\t\t\telse if(s.indexOf(\".\") < 0) {\n\t\t\t\t\t// no decimal point, e.g. 1e-9\n\t\t\t\t\treturn parseInt(s.split(\"e-\")[1]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// exponent and decimal point, e.g. 1.23e-9\n\t\t\t\t\tvar parts = s.split(\".\")[1].split(\"e-\");\n\t\t\t\t\treturn parts[0].length + parseInt(parts[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t},\n\t\ttoRadians = helpers.radians = function(degrees){\n\t\t\treturn degrees * (Math.PI/180);\n\t\t},\n\t\t// Gets the angle from vertical upright to the point about a centre.\n\t\tgetAngleFromPoint = helpers.getAngleFromPoint = function(centrePoint, anglePoint){\n\t\t\tvar distanceFromXCenter = anglePoint.x - centrePoint.x,\n\t\t\t\tdistanceFromYCenter = anglePoint.y - centrePoint.y,\n\t\t\t\tradialDistanceFromCenter = Math.sqrt( distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n\n\n\t\t\tvar angle = Math.PI * 2 + Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\n\t\t\t//If the segment is in the top left quadrant, we need to add another rotation to the angle\n\t\t\tif (distanceFromXCenter < 0 && distanceFromYCenter < 0){\n\t\t\t\tangle += Math.PI*2;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tangle: angle,\n\t\t\t\tdistance: radialDistanceFromCenter\n\t\t\t};\n\t\t},\n\t\taliasPixel = helpers.aliasPixel = function(pixelWidth){\n\t\t\treturn (pixelWidth % 2 === 0) ? 0 : 0.5;\n\t\t},\n\t\tsplineCurve = helpers.splineCurve = function(FirstPoint,MiddlePoint,AfterPoint,t){\n\t\t\t//Props to Rob Spencer at scaled innovation for his post on splining between points\n\t\t\t//http://scaledinnovation.com/analytics/splines/aboutSplines.html\n\t\t\tvar d01=Math.sqrt(Math.pow(MiddlePoint.x-FirstPoint.x,2)+Math.pow(MiddlePoint.y-FirstPoint.y,2)),\n\t\t\t\td12=Math.sqrt(Math.pow(AfterPoint.x-MiddlePoint.x,2)+Math.pow(AfterPoint.y-MiddlePoint.y,2)),\n\t\t\t\tfa=t*d01/(d01+d12),// scaling factor for triangle Ta\n\t\t\t\tfb=t*d12/(d01+d12);\n\t\t\treturn {\n\t\t\t\tinner : {\n\t\t\t\t\tx : MiddlePoint.x-fa*(AfterPoint.x-FirstPoint.x),\n\t\t\t\t\ty : MiddlePoint.y-fa*(AfterPoint.y-FirstPoint.y)\n\t\t\t\t},\n\t\t\t\touter : {\n\t\t\t\t\tx: MiddlePoint.x+fb*(AfterPoint.x-FirstPoint.x),\n\t\t\t\t\ty : MiddlePoint.y+fb*(AfterPoint.y-FirstPoint.y)\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\tcalculateOrderOfMagnitude = helpers.calculateOrderOfMagnitude = function(val){\n\t\t\treturn Math.floor(Math.log(val) / Math.LN10);\n\t\t},\n\t\tcalculateScaleRange = helpers.calculateScaleRange = function(valuesArray, drawingSize, textSize, startFromZero, integersOnly){\n\n\t\t\t//Set a minimum step of two - a point at the top of the graph, and a point at the base\n\t\t\tvar minSteps = 2,\n\t\t\t\tmaxSteps = Math.floor(drawingSize/(textSize * 1.5)),\n\t\t\t\tskipFitting = (minSteps >= maxSteps);\n\n\t\t\t// Filter out null values since these would min() to zero\n\t\t\tvar values = [];\n\t\t\teach(valuesArray, function( v ){\n\t\t\t\tv == null || values.push( v );\n\t\t\t});\n\t\t\tvar minValue = min(values),\n\t\t\t    maxValue = max(values);\n\n\t\t\t// We need some degree of separation here to calculate the scales if all the values are the same\n\t\t\t// Adding/minusing 0.5 will give us a range of 1.\n\t\t\tif (maxValue === minValue){\n\t\t\t\tmaxValue += 0.5;\n\t\t\t\t// So we don't end up with a graph with a negative start value if we've said always start from zero\n\t\t\t\tif (minValue >= 0.5 && !startFromZero){\n\t\t\t\t\tminValue -= 0.5;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t// Make up a whole number above the values\n\t\t\t\t\tmaxValue += 0.5;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar\tvalueRange = Math.abs(maxValue - minValue),\n\t\t\t\trangeOrderOfMagnitude = calculateOrderOfMagnitude(valueRange),\n\t\t\t\tgraphMax = Math.ceil(maxValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude),\n\t\t\t\tgraphMin = (startFromZero) ? 0 : Math.floor(minValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude),\n\t\t\t\tgraphRange = graphMax - graphMin,\n\t\t\t\tstepValue = Math.pow(10, rangeOrderOfMagnitude),\n\t\t\t\tnumberOfSteps = Math.round(graphRange / stepValue);\n\n\t\t\t//If we have more space on the graph we'll use it to give more definition to the data\n\t\t\twhile((numberOfSteps > maxSteps || (numberOfSteps * 2) < maxSteps) && !skipFitting) {\n\t\t\t\tif(numberOfSteps > maxSteps){\n\t\t\t\t\tstepValue *=2;\n\t\t\t\t\tnumberOfSteps = Math.round(graphRange/stepValue);\n\t\t\t\t\t// Don't ever deal with a decimal number of steps - cancel fitting and just use the minimum number of steps.\n\t\t\t\t\tif (numberOfSteps % 1 !== 0){\n\t\t\t\t\t\tskipFitting = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//We can fit in double the amount of scale points on the scale\n\t\t\t\telse{\n\t\t\t\t\t//If user has declared ints only, and the step value isn't a decimal\n\t\t\t\t\tif (integersOnly && rangeOrderOfMagnitude >= 0){\n\t\t\t\t\t\t//If the user has said integers only, we need to check that making the scale more granular wouldn't make it a float\n\t\t\t\t\t\tif(stepValue/2 % 1 === 0){\n\t\t\t\t\t\t\tstepValue /=2;\n\t\t\t\t\t\t\tnumberOfSteps = Math.round(graphRange/stepValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//If it would make it a float break out of the loop\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//If the scale doesn't have to be an int, make the scale more granular anyway.\n\t\t\t\t\telse{\n\t\t\t\t\t\tstepValue /=2;\n\t\t\t\t\t\tnumberOfSteps = Math.round(graphRange/stepValue);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (skipFitting){\n\t\t\t\tnumberOfSteps = minSteps;\n\t\t\t\tstepValue = graphRange / numberOfSteps;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tsteps : numberOfSteps,\n\t\t\t\tstepValue : stepValue,\n\t\t\t\tmin : graphMin,\n\t\t\t\tmax\t: graphMin + (numberOfSteps * stepValue)\n\t\t\t};\n\n\t\t},\n\t\t/* jshint ignore:start */\n\t\t// Blows up jshint errors based on the new Function constructor\n\t\t//Templating methods\n\t\t//Javascript micro templating by John Resig - source at http://ejohn.org/blog/javascript-micro-templating/\n\t\ttemplate = helpers.template = function(templateString, valuesObject){\n\n\t\t\t// If templateString is function rather than string-template - call the function for valuesObject\n\n\t\t\tif(templateString instanceof Function){\n\t\t\t \treturn templateString(valuesObject);\n\t\t \t}\n\n\t\t\tvar cache = {};\n\t\t\tfunction tmpl(str, data){\n\t\t\t\t// Figure out if we're getting a template, or if we need to\n\t\t\t\t// load the template - and be sure to cache the result.\n\t\t\t\tvar fn = !/\\W/.test(str) ?\n\t\t\t\tcache[str] = cache[str] :\n\n\t\t\t\t// Generate a reusable function that will serve as a template\n\t\t\t\t// generator (and which will be cached).\n\t\t\t\tnew Function(\"obj\",\n\t\t\t\t\t\"var p=[],print=function(){p.push.apply(p,arguments);};\" +\n\n\t\t\t\t\t// Introduce the data as local variables using with(){}\n\t\t\t\t\t\"with(obj){p.push('\" +\n\n\t\t\t\t\t// Convert the template into pure JavaScript\n\t\t\t\t\tstr\n\t\t\t\t\t\t.replace(/[\\r\\t\\n]/g, \" \")\n\t\t\t\t\t\t.split(\"<%\").join(\"\\t\")\n\t\t\t\t\t\t.replace(/((^|%>)[^\\t]*)'/g, \"$1\\r\")\n\t\t\t\t\t\t.replace(/\\t=(.*?)%>/g, \"',$1,'\")\n\t\t\t\t\t\t.split(\"\\t\").join(\"');\")\n\t\t\t\t\t\t.split(\"%>\").join(\"p.push('\")\n\t\t\t\t\t\t.split(\"\\r\").join(\"\\\\'\") +\n\t\t\t\t\t\"');}return p.join('');\"\n\t\t\t\t);\n\n\t\t\t\t// Provide some basic currying to the user\n\t\t\t\treturn data ? fn( data ) : fn;\n\t\t\t}\n\t\t\treturn tmpl(templateString,valuesObject);\n\t\t},\n\t\t/* jshint ignore:end */\n\t\tgenerateLabels = helpers.generateLabels = function(templateString,numberOfSteps,graphMin,stepValue){\n\t\t\tvar labelsArray = new Array(numberOfSteps);\n\t\t\tif (templateString){\n\t\t\t\teach(labelsArray,function(val,index){\n\t\t\t\t\tlabelsArray[index] = template(templateString,{value: (graphMin + (stepValue*(index+1)))});\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn labelsArray;\n\t\t},\n\t\t//--Animation methods\n\t\t//Easing functions adapted from Robert Penner's easing equations\n\t\t//http://www.robertpenner.com/easing/\n\t\teasingEffects = helpers.easingEffects = {\n\t\t\tlinear: function (t) {\n\t\t\t\treturn t;\n\t\t\t},\n\t\t\teaseInQuad: function (t) {\n\t\t\t\treturn t * t;\n\t\t\t},\n\t\t\teaseOutQuad: function (t) {\n\t\t\t\treturn -1 * t * (t - 2);\n\t\t\t},\n\t\t\teaseInOutQuad: function (t) {\n\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\treturn 1 / 2 * t * t;\n\t\t\t\t}\n\t\t\t\treturn -1 / 2 * ((--t) * (t - 2) - 1);\n\t\t\t},\n\t\t\teaseInCubic: function (t) {\n\t\t\t\treturn t * t * t;\n\t\t\t},\n\t\t\teaseOutCubic: function (t) {\n\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * t + 1);\n\t\t\t},\n\t\t\teaseInOutCubic: function (t) {\n\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\treturn 1 / 2 * t * t * t;\n\t\t\t\t}\n\t\t\t\treturn 1 / 2 * ((t -= 2) * t * t + 2);\n\t\t\t},\n\t\t\teaseInQuart: function (t) {\n\t\t\t\treturn t * t * t * t;\n\t\t\t},\n\t\t\teaseOutQuart: function (t) {\n\t\t\t\treturn -1 * ((t = t / 1 - 1) * t * t * t - 1);\n\t\t\t},\n\t\t\teaseInOutQuart: function (t) {\n\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\treturn 1 / 2 * t * t * t * t;\n\t\t\t\t}\n\t\t\t\treturn -1 / 2 * ((t -= 2) * t * t * t - 2);\n\t\t\t},\n\t\t\teaseInQuint: function (t) {\n\t\t\t\treturn 1 * (t /= 1) * t * t * t * t;\n\t\t\t},\n\t\t\teaseOutQuint: function (t) {\n\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * t * t * t + 1);\n\t\t\t},\n\t\t\teaseInOutQuint: function (t) {\n\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\treturn 1 / 2 * t * t * t * t * t;\n\t\t\t\t}\n\t\t\t\treturn 1 / 2 * ((t -= 2) * t * t * t * t + 2);\n\t\t\t},\n\t\t\teaseInSine: function (t) {\n\t\t\t\treturn -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;\n\t\t\t},\n\t\t\teaseOutSine: function (t) {\n\t\t\t\treturn 1 * Math.sin(t / 1 * (Math.PI / 2));\n\t\t\t},\n\t\t\teaseInOutSine: function (t) {\n\t\t\t\treturn -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);\n\t\t\t},\n\t\t\teaseInExpo: function (t) {\n\t\t\t\treturn (t === 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));\n\t\t\t},\n\t\t\teaseOutExpo: function (t) {\n\t\t\t\treturn (t === 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);\n\t\t\t},\n\t\t\teaseInOutExpo: function (t) {\n\t\t\t\tif (t === 0){\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tif (t === 1){\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\treturn 1 / 2 * Math.pow(2, 10 * (t - 1));\n\t\t\t\t}\n\t\t\t\treturn 1 / 2 * (-Math.pow(2, -10 * --t) + 2);\n\t\t\t},\n\t\t\teaseInCirc: function (t) {\n\t\t\t\tif (t >= 1){\n\t\t\t\t\treturn t;\n\t\t\t\t}\n\t\t\t\treturn -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);\n\t\t\t},\n\t\t\teaseOutCirc: function (t) {\n\t\t\t\treturn 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);\n\t\t\t},\n\t\t\teaseInOutCirc: function (t) {\n\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\treturn -1 / 2 * (Math.sqrt(1 - t * t) - 1);\n\t\t\t\t}\n\t\t\t\treturn 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n\t\t\t},\n\t\t\teaseInElastic: function (t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\tvar p = 0;\n\t\t\t\tvar a = 1;\n\t\t\t\tif (t === 0){\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tif ((t /= 1) == 1){\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (!p){\n\t\t\t\t\tp = 1 * 0.3;\n\t\t\t\t}\n\t\t\t\tif (a < Math.abs(1)) {\n\t\t\t\t\ta = 1;\n\t\t\t\t\ts = p / 4;\n\t\t\t\t} else{\n\t\t\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t\t\t}\n\t\t\t\treturn -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));\n\t\t\t},\n\t\t\teaseOutElastic: function (t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\tvar p = 0;\n\t\t\t\tvar a = 1;\n\t\t\t\tif (t === 0){\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tif ((t /= 1) == 1){\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (!p){\n\t\t\t\t\tp = 1 * 0.3;\n\t\t\t\t}\n\t\t\t\tif (a < Math.abs(1)) {\n\t\t\t\t\ta = 1;\n\t\t\t\t\ts = p / 4;\n\t\t\t\t} else{\n\t\t\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t\t\t}\n\t\t\t\treturn a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;\n\t\t\t},\n\t\t\teaseInOutElastic: function (t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\tvar p = 0;\n\t\t\t\tvar a = 1;\n\t\t\t\tif (t === 0){\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tif ((t /= 1 / 2) == 2){\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (!p){\n\t\t\t\t\tp = 1 * (0.3 * 1.5);\n\t\t\t\t}\n\t\t\t\tif (a < Math.abs(1)) {\n\t\t\t\t\ta = 1;\n\t\t\t\t\ts = p / 4;\n\t\t\t\t} else {\n\t\t\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t\t\t}\n\t\t\t\tif (t < 1){\n\t\t\t\t\treturn -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));}\n\t\t\t\treturn a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\t\t\t},\n\t\t\teaseInBack: function (t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\treturn 1 * (t /= 1) * t * ((s + 1) * t - s);\n\t\t\t},\n\t\t\teaseOutBack: function (t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\treturn 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);\n\t\t\t},\n\t\t\teaseInOutBack: function (t) {\n\t\t\t\tvar s = 1.70158;\n\t\t\t\tif ((t /= 1 / 2) < 1){\n\t\t\t\t\treturn 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));\n\t\t\t\t}\n\t\t\t\treturn 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n\t\t\t},\n\t\t\teaseInBounce: function (t) {\n\t\t\t\treturn 1 - easingEffects.easeOutBounce(1 - t);\n\t\t\t},\n\t\t\teaseOutBounce: function (t) {\n\t\t\t\tif ((t /= 1) < (1 / 2.75)) {\n\t\t\t\t\treturn 1 * (7.5625 * t * t);\n\t\t\t\t} else if (t < (2 / 2.75)) {\n\t\t\t\t\treturn 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75);\n\t\t\t\t} else if (t < (2.5 / 2.75)) {\n\t\t\t\t\treturn 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375);\n\t\t\t\t} else {\n\t\t\t\t\treturn 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375);\n\t\t\t\t}\n\t\t\t},\n\t\t\teaseInOutBounce: function (t) {\n\t\t\t\tif (t < 1 / 2){\n\t\t\t\t\treturn easingEffects.easeInBounce(t * 2) * 0.5;\n\t\t\t\t}\n\t\t\t\treturn easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;\n\t\t\t}\n\t\t},\n\t\t//Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\n\t\trequestAnimFrame = helpers.requestAnimFrame = (function(){\n\t\t\treturn window.requestAnimationFrame ||\n\t\t\t\twindow.webkitRequestAnimationFrame ||\n\t\t\t\twindow.mozRequestAnimationFrame ||\n\t\t\t\twindow.oRequestAnimationFrame ||\n\t\t\t\twindow.msRequestAnimationFrame ||\n\t\t\t\tfunction(callback) {\n\t\t\t\t\treturn window.setTimeout(callback, 1000 / 60);\n\t\t\t\t};\n\t\t})(),\n\t\tcancelAnimFrame = helpers.cancelAnimFrame = (function(){\n\t\t\treturn window.cancelAnimationFrame ||\n\t\t\t\twindow.webkitCancelAnimationFrame ||\n\t\t\t\twindow.mozCancelAnimationFrame ||\n\t\t\t\twindow.oCancelAnimationFrame ||\n\t\t\t\twindow.msCancelAnimationFrame ||\n\t\t\t\tfunction(callback) {\n\t\t\t\t\treturn window.clearTimeout(callback, 1000 / 60);\n\t\t\t\t};\n\t\t})(),\n\t\tanimationLoop = helpers.animationLoop = function(callback,totalSteps,easingString,onProgress,onComplete,chartInstance){\n\n\t\t\tvar currentStep = 0,\n\t\t\t\teasingFunction = easingEffects[easingString] || easingEffects.linear;\n\n\t\t\tvar animationFrame = function(){\n\t\t\t\tcurrentStep++;\n\t\t\t\tvar stepDecimal = currentStep/totalSteps;\n\t\t\t\tvar easeDecimal = easingFunction(stepDecimal);\n\n\t\t\t\tcallback.call(chartInstance,easeDecimal,stepDecimal, currentStep);\n\t\t\t\tonProgress.call(chartInstance,easeDecimal,stepDecimal);\n\t\t\t\tif (currentStep < totalSteps){\n\t\t\t\t\tchartInstance.animationFrame = requestAnimFrame(animationFrame);\n\t\t\t\t} else{\n\t\t\t\t\tonComplete.apply(chartInstance);\n\t\t\t\t}\n\t\t\t};\n\t\t\trequestAnimFrame(animationFrame);\n\t\t},\n\t\t//-- DOM methods\n\t\tgetRelativePosition = helpers.getRelativePosition = function(evt){\n\t\t\tvar mouseX, mouseY;\n\t\t\tvar e = evt.originalEvent || evt,\n\t\t\t\tcanvas = evt.currentTarget || evt.srcElement,\n\t\t\t\tboundingRect = canvas.getBoundingClientRect();\n\n\t\t\tif (e.touches){\n\t\t\t\tmouseX = e.touches[0].clientX - boundingRect.left;\n\t\t\t\tmouseY = e.touches[0].clientY - boundingRect.top;\n\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmouseX = e.clientX - boundingRect.left;\n\t\t\t\tmouseY = e.clientY - boundingRect.top;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tx : mouseX,\n\t\t\t\ty : mouseY\n\t\t\t};\n\n\t\t},\n\t\taddEvent = helpers.addEvent = function(node,eventType,method){\n\t\t\tif (node.addEventListener){\n\t\t\t\tnode.addEventListener(eventType,method);\n\t\t\t} else if (node.attachEvent){\n\t\t\t\tnode.attachEvent(\"on\"+eventType, method);\n\t\t\t} else {\n\t\t\t\tnode[\"on\"+eventType] = method;\n\t\t\t}\n\t\t},\n\t\tremoveEvent = helpers.removeEvent = function(node, eventType, handler){\n\t\t\tif (node.removeEventListener){\n\t\t\t\tnode.removeEventListener(eventType, handler, false);\n\t\t\t} else if (node.detachEvent){\n\t\t\t\tnode.detachEvent(\"on\"+eventType,handler);\n\t\t\t} else{\n\t\t\t\tnode[\"on\" + eventType] = noop;\n\t\t\t}\n\t\t},\n\t\tbindEvents = helpers.bindEvents = function(chartInstance, arrayOfEvents, handler){\n\t\t\t// Create the events object if it's not already present\n\t\t\tif (!chartInstance.events) chartInstance.events = {};\n\n\t\t\teach(arrayOfEvents,function(eventName){\n\t\t\t\tchartInstance.events[eventName] = function(){\n\t\t\t\t\thandler.apply(chartInstance, arguments);\n\t\t\t\t};\n\t\t\t\taddEvent(chartInstance.chart.canvas,eventName,chartInstance.events[eventName]);\n\t\t\t});\n\t\t},\n\t\tunbindEvents = helpers.unbindEvents = function (chartInstance, arrayOfEvents) {\n\t\t\teach(arrayOfEvents, function(handler,eventName){\n\t\t\t\tremoveEvent(chartInstance.chart.canvas, eventName, handler);\n\t\t\t});\n\t\t},\n\t\tgetMaximumWidth = helpers.getMaximumWidth = function(domNode){\n\t\t\tvar container = domNode.parentNode,\n\t\t\t    padding = parseInt(getStyle(container, 'padding-left')) + parseInt(getStyle(container, 'padding-right'));\n\t\t\t// TODO = check cross browser stuff with this.\n\t\t\treturn container ? container.clientWidth - padding : 0;\n\t\t},\n\t\tgetMaximumHeight = helpers.getMaximumHeight = function(domNode){\n\t\t\tvar container = domNode.parentNode,\n\t\t\t    padding = parseInt(getStyle(container, 'padding-bottom')) + parseInt(getStyle(container, 'padding-top'));\n\t\t\t// TODO = check cross browser stuff with this.\n\t\t\treturn container ? container.clientHeight - padding : 0;\n\t\t},\n\t\tgetStyle = helpers.getStyle = function (el, property) {\n\t\t\treturn el.currentStyle ?\n\t\t\t\tel.currentStyle[property] :\n\t\t\t\tdocument.defaultView.getComputedStyle(el, null).getPropertyValue(property);\n\t\t},\n\t\tgetMaximumSize = helpers.getMaximumSize = helpers.getMaximumWidth, // legacy support\n\t\tretinaScale = helpers.retinaScale = function(chart){\n\t\t\tvar ctx = chart.ctx,\n\t\t\t\twidth = chart.canvas.width,\n\t\t\t\theight = chart.canvas.height;\n\n\t\t\tif (window.devicePixelRatio) {\n\t\t\t\tctx.canvas.style.width = width + \"px\";\n\t\t\t\tctx.canvas.style.height = height + \"px\";\n\t\t\t\tctx.canvas.height = height * window.devicePixelRatio;\n\t\t\t\tctx.canvas.width = width * window.devicePixelRatio;\n\t\t\t\tctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n\t\t\t}\n\t\t},\n\t\t//-- Canvas methods\n\t\tclear = helpers.clear = function(chart){\n\t\t\tchart.ctx.clearRect(0,0,chart.width,chart.height);\n\t\t},\n\t\tfontString = helpers.fontString = function(pixelSize,fontStyle,fontFamily){\n\t\t\treturn fontStyle + \" \" + pixelSize+\"px \" + fontFamily;\n\t\t},\n\t\tlongestText = helpers.longestText = function(ctx,font,arrayOfStrings){\n\t\t\tctx.font = font;\n\t\t\tvar longest = 0;\n\t\t\teach(arrayOfStrings,function(string){\n\t\t\t\tvar textWidth = ctx.measureText(string).width;\n\t\t\t\tlongest = (textWidth > longest) ? textWidth : longest;\n\t\t\t});\n\t\t\treturn longest;\n\t\t},\n\t\tdrawRoundedRectangle = helpers.drawRoundedRectangle = function(ctx,x,y,width,height,radius){\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x + radius, y);\n\t\t\tctx.lineTo(x + width - radius, y);\n\t\t\tctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n\t\t\tctx.lineTo(x + width, y + height - radius);\n\t\t\tctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n\t\t\tctx.lineTo(x + radius, y + height);\n\t\t\tctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n\t\t\tctx.lineTo(x, y + radius);\n\t\t\tctx.quadraticCurveTo(x, y, x + radius, y);\n\t\t\tctx.closePath();\n\t\t};\n\n\n\t//Store a reference to each instance - allowing us to globally resize chart instances on window resize.\n\t//Destroy method on the chart will remove the instance of the chart from this reference.\n\tChart.instances = {};\n\n\tChart.Type = function(data,options,chart){\n\t\tthis.options = options;\n\t\tthis.chart = chart;\n\t\tthis.id = uid();\n\t\t//Add the chart instance to the global namespace\n\t\tChart.instances[this.id] = this;\n\n\t\t// Initialize is always called when a chart type is created\n\t\t// By default it is a no op, but it should be extended\n\t\tif (options.responsive){\n\t\t\tthis.resize();\n\t\t}\n\t\tthis.initialize.call(this,data);\n\t};\n\n\t//Core methods that'll be a part of every chart type\n\textend(Chart.Type.prototype,{\n\t\tinitialize : function(){return this;},\n\t\tclear : function(){\n\t\t\tclear(this.chart);\n\t\t\treturn this;\n\t\t},\n\t\tstop : function(){\n\t\t\t// Stops any current animation loop occuring\n\t\t\tChart.animationService.cancelAnimation(this);\n\t\t\treturn this;\n\t\t},\n\t\tresize : function(callback){\n\t\t\tthis.stop();\n\t\t\tvar canvas = this.chart.canvas,\n\t\t\t\tnewWidth = getMaximumWidth(this.chart.canvas),\n\t\t\t\tnewHeight = this.options.maintainAspectRatio ? newWidth / this.chart.aspectRatio : getMaximumHeight(this.chart.canvas);\n\n\t\t\tcanvas.width = this.chart.width = newWidth;\n\t\t\tcanvas.height = this.chart.height = newHeight;\n\n\t\t\tretinaScale(this.chart);\n\n\t\t\tif (typeof callback === \"function\"){\n\t\t\t\tcallback.apply(this, Array.prototype.slice.call(arguments, 1));\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\treflow : noop,\n\t\trender : function(reflow){\n\t\t\tif (reflow){\n\t\t\t\tthis.reflow();\n\t\t\t}\n\t\t\t\n\t\t\tif (this.options.animation && !reflow){\n\t\t\t\tvar animation = new Chart.Animation();\n\t\t\t\tanimation.numSteps = this.options.animationSteps;\n\t\t\t\tanimation.easing = this.options.animationEasing;\n\t\t\t\t\n\t\t\t\t// render function\n\t\t\t\tanimation.render = function(chartInstance, animationObject) {\n\t\t\t\t\tvar easingFunction = helpers.easingEffects[animationObject.easing];\n\t\t\t\t\tvar stepDecimal = animationObject.currentStep / animationObject.numSteps;\n\t\t\t\t\tvar easeDecimal = easingFunction(stepDecimal);\n\t\t\t\t\t\n\t\t\t\t\tchartInstance.draw(easeDecimal, stepDecimal, animationObject.currentStep);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// user events\n\t\t\t\tanimation.onAnimationProgress = this.options.onAnimationProgress;\n\t\t\t\tanimation.onAnimationComplete = this.options.onAnimationComplete;\n\t\t\t\t\n\t\t\t\tChart.animationService.addAnimation(this, animation);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthis.draw();\n\t\t\t\tthis.options.onAnimationComplete.call(this);\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\tgenerateLegend : function(){\n\t\t\treturn helpers.template(this.options.legendTemplate, this);\n\t\t},\n\t\tdestroy : function(){\n\t\t\tthis.stop();\n\t\t\tthis.clear();\n\t\t\tunbindEvents(this, this.events);\n\t\t\tvar canvas = this.chart.canvas;\n\n\t\t\t// Reset canvas height/width attributes starts a fresh with the canvas context\n\t\t\tcanvas.width = this.chart.width;\n\t\t\tcanvas.height = this.chart.height;\n\n\t\t\t// < IE9 doesn't support removeProperty\n\t\t\tif (canvas.style.removeProperty) {\n\t\t\t\tcanvas.style.removeProperty('width');\n\t\t\t\tcanvas.style.removeProperty('height');\n\t\t\t} else {\n\t\t\t\tcanvas.style.removeAttribute('width');\n\t\t\t\tcanvas.style.removeAttribute('height');\n\t\t\t}\n\n\t\t\tdelete Chart.instances[this.id];\n\t\t},\n\t\tshowTooltip : function(ChartElements, forceRedraw){\n\t\t\t// Only redraw the chart if we've actually changed what we're hovering on.\n\t\t\tif (typeof this.activeElements === 'undefined') this.activeElements = [];\n\n\t\t\tvar isChanged = (function(Elements){\n\t\t\t\tvar changed = false;\n\n\t\t\t\tif (Elements.length !== this.activeElements.length){\n\t\t\t\t\tchanged = true;\n\t\t\t\t\treturn changed;\n\t\t\t\t}\n\n\t\t\t\teach(Elements, function(element, index){\n\t\t\t\t\tif (element !== this.activeElements[index]){\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t}, this);\n\t\t\t\treturn changed;\n\t\t\t}).call(this, ChartElements);\n\n\t\t\tif (!isChanged && !forceRedraw){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthis.activeElements = ChartElements;\n\t\t\t}\n\t\t\tthis.draw();\n\t\t\tif(this.options.customTooltips){\n\t\t\t\tthis.options.customTooltips(false);\n\t\t\t}\n\t\t\tif (ChartElements.length > 0){\n\t\t\t\t// If we have multiple datasets, show a MultiTooltip for all of the data points at that index\n\t\t\t\tif (this.datasets && this.datasets.length > 1) {\n\t\t\t\t\tvar dataArray,\n\t\t\t\t\t\tdataIndex;\n\n\t\t\t\t\tfor (var i = this.datasets.length - 1; i >= 0; i--) {\n\t\t\t\t\t\tdataArray = this.datasets[i].points || this.datasets[i].bars || this.datasets[i].segments;\n\t\t\t\t\t\tdataIndex = indexOf(dataArray, ChartElements[0]);\n\t\t\t\t\t\tif (dataIndex !== -1){\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvar tooltipLabels = [],\n\t\t\t\t\t\ttooltipColors = [],\n\t\t\t\t\t\tmedianPosition = (function(index) {\n\n\t\t\t\t\t\t\t// Get all the points at that particular index\n\t\t\t\t\t\t\tvar Elements = [],\n\t\t\t\t\t\t\t\tdataCollection,\n\t\t\t\t\t\t\t\txPositions = [],\n\t\t\t\t\t\t\t\tyPositions = [],\n\t\t\t\t\t\t\t\txMax,\n\t\t\t\t\t\t\t\tyMax,\n\t\t\t\t\t\t\t\txMin,\n\t\t\t\t\t\t\t\tyMin;\n\t\t\t\t\t\t\thelpers.each(this.datasets, function(dataset){\n\t\t\t\t\t\t\t\tdataCollection = dataset.points || dataset.bars || dataset.segments;\n\t\t\t\t\t\t\t\tif (dataCollection[dataIndex] && dataCollection[dataIndex].hasValue()){\n\t\t\t\t\t\t\t\t\tElements.push(dataCollection[dataIndex]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\thelpers.each(Elements, function(element) {\n\t\t\t\t\t\t\t\txPositions.push(element.x);\n\t\t\t\t\t\t\t\tyPositions.push(element.y);\n\n\n\t\t\t\t\t\t\t\t//Include any colour information about the element\n\t\t\t\t\t\t\t\ttooltipLabels.push(helpers.template(this.options.multiTooltipTemplate, element));\n\t\t\t\t\t\t\t\ttooltipColors.push({\n\t\t\t\t\t\t\t\t\tfill: element._saved.fillColor || element.fillColor,\n\t\t\t\t\t\t\t\t\tstroke: element._saved.strokeColor || element.strokeColor\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t}, this);\n\n\t\t\t\t\t\t\tyMin = min(yPositions);\n\t\t\t\t\t\t\tyMax = max(yPositions);\n\n\t\t\t\t\t\t\txMin = min(xPositions);\n\t\t\t\t\t\t\txMax = max(xPositions);\n\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tx: (xMin > this.chart.width/2) ? xMin : xMax,\n\t\t\t\t\t\t\t\ty: (yMin + yMax)/2\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}).call(this, dataIndex);\n\n\t\t\t\t\tnew Chart.MultiTooltip({\n\t\t\t\t\t\tx: medianPosition.x,\n\t\t\t\t\t\ty: medianPosition.y,\n\t\t\t\t\t\txPadding: this.options.tooltipXPadding,\n\t\t\t\t\t\tyPadding: this.options.tooltipYPadding,\n\t\t\t\t\t\txOffset: this.options.tooltipXOffset,\n\t\t\t\t\t\tfillColor: this.options.tooltipFillColor,\n\t\t\t\t\t\ttextColor: this.options.tooltipFontColor,\n\t\t\t\t\t\tfontFamily: this.options.tooltipFontFamily,\n\t\t\t\t\t\tfontStyle: this.options.tooltipFontStyle,\n\t\t\t\t\t\tfontSize: this.options.tooltipFontSize,\n\t\t\t\t\t\ttitleTextColor: this.options.tooltipTitleFontColor,\n\t\t\t\t\t\ttitleFontFamily: this.options.tooltipTitleFontFamily,\n\t\t\t\t\t\ttitleFontStyle: this.options.tooltipTitleFontStyle,\n\t\t\t\t\t\ttitleFontSize: this.options.tooltipTitleFontSize,\n\t\t\t\t\t\tcornerRadius: this.options.tooltipCornerRadius,\n\t\t\t\t\t\tlabels: tooltipLabels,\n\t\t\t\t\t\tlegendColors: tooltipColors,\n\t\t\t\t\t\tlegendColorBackground : this.options.multiTooltipKeyBackground,\n\t\t\t\t\t\ttitle: template(this.options.tooltipTitleTemplate,ChartElements[0]),\n\t\t\t\t\t\tchart: this.chart,\n\t\t\t\t\t\tctx: this.chart.ctx,\n\t\t\t\t\t\tcustom: this.options.customTooltips\n\t\t\t\t\t}).draw();\n\n\t\t\t\t} else {\n\t\t\t\t\teach(ChartElements, function(Element) {\n\t\t\t\t\t\tvar tooltipPosition = Element.tooltipPosition();\n\t\t\t\t\t\tnew Chart.Tooltip({\n\t\t\t\t\t\t\tx: Math.round(tooltipPosition.x),\n\t\t\t\t\t\t\ty: Math.round(tooltipPosition.y),\n\t\t\t\t\t\t\txPadding: this.options.tooltipXPadding,\n\t\t\t\t\t\t\tyPadding: this.options.tooltipYPadding,\n\t\t\t\t\t\t\tfillColor: this.options.tooltipFillColor,\n\t\t\t\t\t\t\ttextColor: this.options.tooltipFontColor,\n\t\t\t\t\t\t\tfontFamily: this.options.tooltipFontFamily,\n\t\t\t\t\t\t\tfontStyle: this.options.tooltipFontStyle,\n\t\t\t\t\t\t\tfontSize: this.options.tooltipFontSize,\n\t\t\t\t\t\t\tcaretHeight: this.options.tooltipCaretSize,\n\t\t\t\t\t\t\tcornerRadius: this.options.tooltipCornerRadius,\n\t\t\t\t\t\t\ttext: template(this.options.tooltipTemplate, Element),\n\t\t\t\t\t\t\tchart: this.chart,\n\t\t\t\t\t\t\tcustom: this.options.customTooltips\n\t\t\t\t\t\t}).draw();\n\t\t\t\t\t}, this);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\ttoBase64Image : function(){\n\t\t\treturn this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);\n\t\t}\n\t});\n\n\tChart.Type.extend = function(extensions){\n\n\t\tvar parent = this;\n\n\t\tvar ChartType = function(){\n\t\t\treturn parent.apply(this,arguments);\n\t\t};\n\n\t\t//Copy the prototype object of the this class\n\t\tChartType.prototype = clone(parent.prototype);\n\t\t//Now overwrite some of the properties in the base class with the new extensions\n\t\textend(ChartType.prototype, extensions);\n\n\t\tChartType.extend = Chart.Type.extend;\n\n\t\tif (extensions.name || parent.prototype.name){\n\n\t\t\tvar chartName = extensions.name || parent.prototype.name;\n\t\t\t//Assign any potential default values of the new chart type\n\n\t\t\t//If none are defined, we'll use a clone of the chart type this is being extended from.\n\t\t\t//I.e. if we extend a line chart, we'll use the defaults from the line chart if our new chart\n\t\t\t//doesn't define some defaults of their own.\n\n\t\t\tvar baseDefaults = (Chart.defaults[parent.prototype.name]) ? clone(Chart.defaults[parent.prototype.name]) : {};\n\n\t\t\tChart.defaults[chartName] = extend(baseDefaults,extensions.defaults);\n\n\t\t\tChart.types[chartName] = ChartType;\n\n\t\t\t//Register this new chart type in the Chart prototype\n\t\t\tChart.prototype[chartName] = function(data,options){\n\t\t\t\tvar config = merge(Chart.defaults.global, Chart.defaults[chartName], options || {});\n\t\t\t\treturn new ChartType(data,config,this);\n\t\t\t};\n\t\t} else{\n\t\t\twarn(\"Name not provided for this chart, so it hasn't been registered\");\n\t\t}\n\t\treturn parent;\n\t};\n\n\tChart.Element = function(configuration){\n\t\textend(this,configuration);\n\t\tthis.initialize.apply(this,arguments);\n\t\tthis.save();\n\t};\n\textend(Chart.Element.prototype,{\n\t\tinitialize : function(){},\n\t\trestore : function(props){\n\t\t\tif (!props){\n\t\t\t\textend(this,this._saved);\n\t\t\t} else {\n\t\t\t\teach(props,function(key){\n\t\t\t\t\tthis[key] = this._saved[key];\n\t\t\t\t},this);\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\tsave : function(){\n\t\t\tthis._saved = clone(this);\n\t\t\tdelete this._saved._saved;\n\t\t\treturn this;\n\t\t},\n\t\tupdate : function(newProps){\n\t\t\teach(newProps,function(value,key){\n\t\t\t\tthis._saved[key] = this[key];\n\t\t\t\tthis[key] = value;\n\t\t\t},this);\n\t\t\treturn this;\n\t\t},\n\t\ttransition : function(props,ease){\n\t\t\teach(props,function(value,key){\n\t\t\t\tthis[key] = ((value - this._saved[key]) * ease) + this._saved[key];\n\t\t\t},this);\n\t\t\treturn this;\n\t\t},\n\t\ttooltipPosition : function(){\n\t\t\treturn {\n\t\t\t\tx : this.x,\n\t\t\t\ty : this.y\n\t\t\t};\n\t\t},\n\t\thasValue: function(){\n\t\t\treturn isNumber(this.value);\n\t\t}\n\t});\n\n\tChart.Element.extend = inherits;\n\n\n\tChart.Point = Chart.Element.extend({\n\t\tdisplay: true,\n\t\tinRange: function(chartX,chartY){\n\t\t\tvar hitDetectionRange = this.hitDetectionRadius + this.radius;\n\t\t\treturn ((Math.pow(chartX-this.x, 2)+Math.pow(chartY-this.y, 2)) < Math.pow(hitDetectionRange,2));\n\t\t},\n\t\tdraw : function(){\n\t\t\tif (this.display){\n\t\t\t\tvar ctx = this.ctx;\n\t\t\t\tctx.beginPath();\n\n\t\t\t\tctx.arc(this.x, this.y, this.radius, 0, Math.PI*2);\n\t\t\t\tctx.closePath();\n\n\t\t\t\tctx.strokeStyle = this.strokeColor;\n\t\t\t\tctx.lineWidth = this.strokeWidth;\n\n\t\t\t\tctx.fillStyle = this.fillColor;\n\n\t\t\t\tctx.fill();\n\t\t\t\tctx.stroke();\n\t\t\t}\n\n\n\t\t\t//Quick debug for bezier curve splining\n\t\t\t//Highlights control points and the line between them.\n\t\t\t//Handy for dev - stripped in the min version.\n\n\t\t\t// ctx.save();\n\t\t\t// ctx.fillStyle = \"black\";\n\t\t\t// ctx.strokeStyle = \"black\"\n\t\t\t// ctx.beginPath();\n\t\t\t// ctx.arc(this.controlPoints.inner.x,this.controlPoints.inner.y, 2, 0, Math.PI*2);\n\t\t\t// ctx.fill();\n\n\t\t\t// ctx.beginPath();\n\t\t\t// ctx.arc(this.controlPoints.outer.x,this.controlPoints.outer.y, 2, 0, Math.PI*2);\n\t\t\t// ctx.fill();\n\n\t\t\t// ctx.moveTo(this.controlPoints.inner.x,this.controlPoints.inner.y);\n\t\t\t// ctx.lineTo(this.x, this.y);\n\t\t\t// ctx.lineTo(this.controlPoints.outer.x,this.controlPoints.outer.y);\n\t\t\t// ctx.stroke();\n\n\t\t\t// ctx.restore();\n\n\n\n\t\t}\n\t});\n\n\tChart.Arc = Chart.Element.extend({\n\t\tinRange : function(chartX,chartY){\n\n\t\t\tvar pointRelativePosition = helpers.getAngleFromPoint(this, {\n\t\t\t\tx: chartX,\n\t\t\t\ty: chartY\n\t\t\t});\n\n\t\t\t// Normalize all angles to 0 - 2*PI (0 - 360°)\n\t\t\tvar pointRelativeAngle = pointRelativePosition.angle % (Math.PI * 2),\n\t\t\t    startAngle = (Math.PI * 2 + this.startAngle) % (Math.PI * 2),\n\t\t\t    endAngle = (Math.PI * 2 + this.endAngle) % (Math.PI * 2) || 360;\n\n\t\t\t// Calculate wether the pointRelativeAngle is between the start and the end angle\n\t\t\tvar betweenAngles = (endAngle < startAngle) ?\n\t\t\t\tpointRelativeAngle <= endAngle || pointRelativeAngle >= startAngle:\n\t\t\t\tpointRelativeAngle >= startAngle && pointRelativeAngle <= endAngle;\n\n\t\t\t//Check if within the range of the open/close angle\n\t\t\tvar withinRadius = (pointRelativePosition.distance >= this.innerRadius && pointRelativePosition.distance <= this.outerRadius);\n\n\t\t\treturn (betweenAngles && withinRadius);\n\t\t\t//Ensure within the outside of the arc centre, but inside arc outer\n\t\t},\n\t\ttooltipPosition : function(){\n\t\t\tvar centreAngle = this.startAngle + ((this.endAngle - this.startAngle) / 2),\n\t\t\t\trangeFromCentre = (this.outerRadius - this.innerRadius) / 2 + this.innerRadius;\n\t\t\treturn {\n\t\t\t\tx : this.x + (Math.cos(centreAngle) * rangeFromCentre),\n\t\t\t\ty : this.y + (Math.sin(centreAngle) * rangeFromCentre)\n\t\t\t};\n\t\t},\n\t\tdraw : function(animationPercent){\n\n\t\t\tvar easingDecimal = animationPercent || 1;\n\n\t\t\tvar ctx = this.ctx;\n\n\t\t\tctx.beginPath();\n\n\t\t\tctx.arc(this.x, this.y, this.outerRadius < 0 ? 0 : this.outerRadius, this.startAngle, this.endAngle);\n\n            ctx.arc(this.x, this.y, this.innerRadius < 0 ? 0 : this.innerRadius, this.endAngle, this.startAngle, true);\n\n\t\t\tctx.closePath();\n\t\t\tctx.strokeStyle = this.strokeColor;\n\t\t\tctx.lineWidth = this.strokeWidth;\n\n\t\t\tctx.fillStyle = this.fillColor;\n\n\t\t\tctx.fill();\n\t\t\tctx.lineJoin = 'bevel';\n\n\t\t\tif (this.showStroke){\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t}\n\t});\n\n\tChart.Rectangle = Chart.Element.extend({\n\t\tdraw : function(){\n\t\t\tvar ctx = this.ctx,\n\t\t\t\thalfWidth = this.width/2,\n\t\t\t\tleftX = this.x - halfWidth,\n\t\t\t\trightX = this.x + halfWidth,\n\t\t\t\ttop = this.base - (this.base - this.y),\n\t\t\t\thalfStroke = this.strokeWidth / 2;\n\n\t\t\t// Canvas doesn't allow us to stroke inside the width so we can\n\t\t\t// adjust the sizes to fit if we're setting a stroke on the line\n\t\t\tif (this.showStroke){\n\t\t\t\tleftX += halfStroke;\n\t\t\t\trightX -= halfStroke;\n\t\t\t\ttop += halfStroke;\n\t\t\t}\n\n\t\t\tctx.beginPath();\n\n\t\t\tctx.fillStyle = this.fillColor;\n\t\t\tctx.strokeStyle = this.strokeColor;\n\t\t\tctx.lineWidth = this.strokeWidth;\n\n\t\t\t// It'd be nice to keep this class totally generic to any rectangle\n\t\t\t// and simply specify which border to miss out.\n\t\t\tctx.moveTo(leftX, this.base);\n\t\t\tctx.lineTo(leftX, top);\n\t\t\tctx.lineTo(rightX, top);\n\t\t\tctx.lineTo(rightX, this.base);\n\t\t\tctx.fill();\n\t\t\tif (this.showStroke){\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t},\n\t\theight : function(){\n\t\t\treturn this.base - this.y;\n\t\t},\n\t\tinRange : function(chartX,chartY){\n\t\t\treturn (chartX >= this.x - this.width/2 && chartX <= this.x + this.width/2) && (chartY >= this.y && chartY <= this.base);\n\t\t}\n\t});\n\n\tChart.Animation = Chart.Element.extend({\n\t\tcurrentStep: null, // the current animation step\n\t\tnumSteps: 60, // default number of steps\n\t\teasing: \"\", // the easing to use for this animation\n\t\trender: null, // render function used by the animation service\n\t\t\n\t\tonAnimationProgress: null, // user specified callback to fire on each step of the animation \n\t\tonAnimationComplete: null, // user specified callback to fire when the animation finishes\n\t});\n\t\n\tChart.Tooltip = Chart.Element.extend({\n\t\tdraw : function(){\n\n\t\t\tvar ctx = this.chart.ctx;\n\n\t\t\tctx.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);\n\n\t\t\tthis.xAlign = \"center\";\n\t\t\tthis.yAlign = \"above\";\n\n\t\t\t//Distance between the actual element.y position and the start of the tooltip caret\n\t\t\tvar caretPadding = this.caretPadding = 2;\n\n\t\t\tvar tooltipWidth = ctx.measureText(this.text).width + 2*this.xPadding,\n\t\t\t\ttooltipRectHeight = this.fontSize + 2*this.yPadding,\n\t\t\t\ttooltipHeight = tooltipRectHeight + this.caretHeight + caretPadding;\n\n\t\t\tif (this.x + tooltipWidth/2 >this.chart.width){\n\t\t\t\tthis.xAlign = \"left\";\n\t\t\t} else if (this.x - tooltipWidth/2 < 0){\n\t\t\t\tthis.xAlign = \"right\";\n\t\t\t}\n\n\t\t\tif (this.y - tooltipHeight < 0){\n\t\t\t\tthis.yAlign = \"below\";\n\t\t\t}\n\n\n\t\t\tvar tooltipX = this.x - tooltipWidth/2,\n\t\t\t\ttooltipY = this.y - tooltipHeight;\n\n\t\t\tctx.fillStyle = this.fillColor;\n\n\t\t\t// Custom Tooltips\n\t\t\tif(this.custom){\n\t\t\t\tthis.custom(this);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tswitch(this.yAlign)\n\t\t\t\t{\n\t\t\t\tcase \"above\":\n\t\t\t\t\t//Draw a caret above the x/y\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(this.x,this.y - caretPadding);\n\t\t\t\t\tctx.lineTo(this.x + this.caretHeight, this.y - (caretPadding + this.caretHeight));\n\t\t\t\t\tctx.lineTo(this.x - this.caretHeight, this.y - (caretPadding + this.caretHeight));\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\tctx.fill();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"below\":\n\t\t\t\t\ttooltipY = this.y + caretPadding + this.caretHeight;\n\t\t\t\t\t//Draw a caret below the x/y\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(this.x, this.y + caretPadding);\n\t\t\t\t\tctx.lineTo(this.x + this.caretHeight, this.y + caretPadding + this.caretHeight);\n\t\t\t\t\tctx.lineTo(this.x - this.caretHeight, this.y + caretPadding + this.caretHeight);\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\tctx.fill();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tswitch(this.xAlign)\n\t\t\t\t{\n\t\t\t\tcase \"left\":\n\t\t\t\t\ttooltipX = this.x - tooltipWidth + (this.cornerRadius + this.caretHeight);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"right\":\n\t\t\t\t\ttooltipX = this.x - (this.cornerRadius + this.caretHeight);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tdrawRoundedRectangle(ctx,tooltipX,tooltipY,tooltipWidth,tooltipRectHeight,this.cornerRadius);\n\n\t\t\t\tctx.fill();\n\n\t\t\t\tctx.fillStyle = this.textColor;\n\t\t\t\tctx.textAlign = \"center\";\n\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\tctx.fillText(this.text, tooltipX + tooltipWidth/2, tooltipY + tooltipRectHeight/2);\n\t\t\t}\n\t\t}\n\t});\n\n\tChart.MultiTooltip = Chart.Element.extend({\n\t\tinitialize : function(){\n\t\t\tthis.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);\n\n\t\t\tthis.titleFont = fontString(this.titleFontSize,this.titleFontStyle,this.titleFontFamily);\n\n\t\t\tthis.titleHeight = this.title ? this.titleFontSize * 1.5 : 0;\n\t\t\tthis.height = (this.labels.length * this.fontSize) + ((this.labels.length-1) * (this.fontSize/2)) + (this.yPadding*2) + this.titleHeight;\n\n\t\t\tthis.ctx.font = this.titleFont;\n\n\t\t\tvar titleWidth = this.ctx.measureText(this.title).width,\n\t\t\t\t//Label has a legend square as well so account for this.\n\t\t\t\tlabelWidth = longestText(this.ctx,this.font,this.labels) + this.fontSize + 3,\n\t\t\t\tlongestTextWidth = max([labelWidth,titleWidth]);\n\n\t\t\tthis.width = longestTextWidth + (this.xPadding*2);\n\n\n\t\t\tvar halfHeight = this.height/2;\n\n\t\t\t//Check to ensure the height will fit on the canvas\n\t\t\tif (this.y - halfHeight < 0 ){\n\t\t\t\tthis.y = halfHeight;\n\t\t\t} else if (this.y + halfHeight > this.chart.height){\n\t\t\t\tthis.y = this.chart.height - halfHeight;\n\t\t\t}\n\n\t\t\t//Decide whether to align left or right based on position on canvas\n\t\t\tif (this.x > this.chart.width/2){\n\t\t\t\tthis.x -= this.xOffset + this.width;\n\t\t\t} else {\n\t\t\t\tthis.x += this.xOffset;\n\t\t\t}\n\n\n\t\t},\n\t\tgetLineHeight : function(index){\n\t\t\tvar baseLineHeight = this.y - (this.height/2) + this.yPadding,\n\t\t\t\tafterTitleIndex = index-1;\n\n\t\t\t//If the index is zero, we're getting the title\n\t\t\tif (index === 0){\n\t\t\t\treturn baseLineHeight + this.titleHeight / 3;\n\t\t\t} else{\n\t\t\t\treturn baseLineHeight + ((this.fontSize * 1.5 * afterTitleIndex) + this.fontSize / 2) + this.titleHeight;\n\t\t\t}\n\n\t\t},\n\t\tdraw : function(){\n\t\t\t// Custom Tooltips\n\t\t\tif(this.custom){\n\t\t\t\tthis.custom(this);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdrawRoundedRectangle(this.ctx,this.x,this.y - this.height/2,this.width,this.height,this.cornerRadius);\n\t\t\t\tvar ctx = this.ctx;\n\t\t\t\tctx.fillStyle = this.fillColor;\n\t\t\t\tctx.fill();\n\t\t\t\tctx.closePath();\n\n\t\t\t\tctx.textAlign = \"left\";\n\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\tctx.fillStyle = this.titleTextColor;\n\t\t\t\tctx.font = this.titleFont;\n\n\t\t\t\tctx.fillText(this.title,this.x + this.xPadding, this.getLineHeight(0));\n\n\t\t\t\tctx.font = this.font;\n\t\t\t\thelpers.each(this.labels,function(label,index){\n\t\t\t\t\tctx.fillStyle = this.textColor;\n\t\t\t\t\tctx.fillText(label,this.x + this.xPadding + this.fontSize + 3, this.getLineHeight(index + 1));\n\n\t\t\t\t\t//A bit gnarly, but clearing this rectangle breaks when using explorercanvas (clears whole canvas)\n\t\t\t\t\t//ctx.clearRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);\n\t\t\t\t\t//Instead we'll make a white filled block to put the legendColour palette over.\n\n\t\t\t\t\tctx.fillStyle = this.legendColorBackground;\n\t\t\t\t\tctx.fillRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);\n\n\t\t\t\t\tctx.fillStyle = this.legendColors[index].fill;\n\t\t\t\t\tctx.fillRect(this.x + this.xPadding, this.getLineHeight(index + 1) - this.fontSize/2, this.fontSize, this.fontSize);\n\n\n\t\t\t\t},this);\n\t\t\t}\n\t\t}\n\t});\n\n\tChart.Scale = Chart.Element.extend({\n\t\tinitialize : function(){\n\t\t\tthis.fit();\n\t\t},\n\t\tbuildYLabels : function(){\n\t\t\tthis.yLabels = [];\n\n\t\t\tvar stepDecimalPlaces = getDecimalPlaces(this.stepValue);\n\n\t\t\tfor (var i=0; i<=this.steps; i++){\n\t\t\t\tthis.yLabels.push(template(this.templateString,{value:(this.min + (i * this.stepValue)).toFixed(stepDecimalPlaces)}));\n\t\t\t}\n\t\t\tthis.yLabelWidth = (this.display && this.showLabels) ? longestText(this.ctx,this.font,this.yLabels) + 10 : 0;\n\t\t},\n\t\taddXLabel : function(label){\n\t\t\tthis.xLabels.push(label);\n\t\t\tthis.valuesCount++;\n\t\t\tthis.fit();\n\t\t},\n\t\tremoveXLabel : function(){\n\t\t\tthis.xLabels.shift();\n\t\t\tthis.valuesCount--;\n\t\t\tthis.fit();\n\t\t},\n\t\t// Fitting loop to rotate x Labels and figure out what fits there, and also calculate how many Y steps to use\n\t\tfit: function(){\n\t\t\t// First we need the width of the yLabels, assuming the xLabels aren't rotated\n\n\t\t\t// To do that we need the base line at the top and base of the chart, assuming there is no x label rotation\n\t\t\tthis.startPoint = (this.display) ? this.fontSize : 0;\n\t\t\tthis.endPoint = (this.display) ? this.height - (this.fontSize * 1.5) - 5 : this.height; // -5 to pad labels\n\n\t\t\t// Apply padding settings to the start and end point.\n\t\t\tthis.startPoint += this.padding;\n\t\t\tthis.endPoint -= this.padding;\n\n\t\t\t// Cache the starting endpoint, excluding the space for x labels\n\t\t\tvar cachedEndPoint = this.endPoint;\n\n\t\t\t// Cache the starting height, so can determine if we need to recalculate the scale yAxis\n\t\t\tvar cachedHeight = this.endPoint - this.startPoint,\n\t\t\t\tcachedYLabelWidth;\n\n\t\t\t// Build the current yLabels so we have an idea of what size they'll be to start\n\t\t\t/*\n\t\t\t *\tThis sets what is returned from calculateScaleRange as static properties of this class:\n\t\t\t *\n\t\t\t\tthis.steps;\n\t\t\t\tthis.stepValue;\n\t\t\t\tthis.min;\n\t\t\t\tthis.max;\n\t\t\t *\n\t\t\t */\n\t\t\tthis.calculateYRange(cachedHeight);\n\n\t\t\t// With these properties set we can now build the array of yLabels\n\t\t\t// and also the width of the largest yLabel\n\t\t\tthis.buildYLabels();\n\n\t\t\tthis.calculateXLabelRotation();\n\n\t\t\twhile((cachedHeight > this.endPoint - this.startPoint)){\n\t\t\t\tcachedHeight = this.endPoint - this.startPoint;\n\t\t\t\tcachedYLabelWidth = this.yLabelWidth;\n\n\t\t\t\tthis.calculateYRange(cachedHeight);\n\t\t\t\tthis.buildYLabels();\n\n\t\t\t\t// Only go through the xLabel loop again if the yLabel width has changed\n\t\t\t\tif (cachedYLabelWidth < this.yLabelWidth){\n\t\t\t\t\tthis.endPoint = cachedEndPoint;\n\t\t\t\t\tthis.calculateXLabelRotation();\n\t\t\t\t}\n\t\t\t}\n\n\t\t},\n\t\tcalculateXLabelRotation : function(){\n\t\t\t//Get the width of each grid by calculating the difference\n\t\t\t//between x offsets between 0 and 1.\n\n\t\t\tthis.ctx.font = this.font;\n\n\t\t\tvar firstWidth = this.ctx.measureText(this.xLabels[0]).width,\n\t\t\t\tlastWidth = this.ctx.measureText(this.xLabels[this.xLabels.length - 1]).width,\n\t\t\t\tfirstRotated,\n\t\t\t\tlastRotated;\n\n\n\t\t\tthis.xScalePaddingRight = lastWidth/2 + 3;\n\t\t\tthis.xScalePaddingLeft = (firstWidth/2 > this.yLabelWidth) ? firstWidth/2 : this.yLabelWidth;\n\n\t\t\tthis.xLabelRotation = 0;\n\t\t\tif (this.display){\n\t\t\t\tvar originalLabelWidth = longestText(this.ctx,this.font,this.xLabels),\n\t\t\t\t\tcosRotation,\n\t\t\t\t\tfirstRotatedWidth;\n\t\t\t\tthis.xLabelWidth = originalLabelWidth;\n\t\t\t\t//Allow 3 pixels x2 padding either side for label readability\n\t\t\t\tvar xGridWidth = Math.floor(this.calculateX(1) - this.calculateX(0)) - 6;\n\n\t\t\t\t//Max label rotate should be 90 - also act as a loop counter\n\t\t\t\twhile ((this.xLabelWidth > xGridWidth && this.xLabelRotation === 0) || (this.xLabelWidth > xGridWidth && this.xLabelRotation <= 90 && this.xLabelRotation > 0)){\n\t\t\t\t\tcosRotation = Math.cos(toRadians(this.xLabelRotation));\n\n\t\t\t\t\tfirstRotated = cosRotation * firstWidth;\n\t\t\t\t\tlastRotated = cosRotation * lastWidth;\n\n\t\t\t\t\t// We're right aligning the text now.\n\t\t\t\t\tif (firstRotated + this.fontSize / 2 > this.yLabelWidth){\n\t\t\t\t\t\tthis.xScalePaddingLeft = firstRotated + this.fontSize / 2;\n\t\t\t\t\t}\n\t\t\t\t\tthis.xScalePaddingRight = this.fontSize/2;\n\n\n\t\t\t\t\tthis.xLabelRotation++;\n\t\t\t\t\tthis.xLabelWidth = cosRotation * originalLabelWidth;\n\n\t\t\t\t}\n\t\t\t\tif (this.xLabelRotation > 0){\n\t\t\t\t\tthis.endPoint -= Math.sin(toRadians(this.xLabelRotation))*originalLabelWidth + 3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthis.xLabelWidth = 0;\n\t\t\t\tthis.xScalePaddingRight = this.padding;\n\t\t\t\tthis.xScalePaddingLeft = this.padding;\n\t\t\t}\n\n\t\t},\n\t\t// Needs to be overidden in each Chart type\n\t\t// Otherwise we need to pass all the data into the scale class\n\t\tcalculateYRange: noop,\n\t\tdrawingArea: function(){\n\t\t\treturn this.startPoint - this.endPoint;\n\t\t},\n\t\tcalculateY : function(value){\n\t\t\tvar scalingFactor = this.drawingArea() / (this.min - this.max);\n\t\t\treturn this.endPoint - (scalingFactor * (value - this.min));\n\t\t},\n\t\tcalculateX : function(index){\n\t\t\tvar isRotated = (this.xLabelRotation > 0),\n\t\t\t\t// innerWidth = (this.offsetGridLines) ? this.width - offsetLeft - this.padding : this.width - (offsetLeft + halfLabelWidth * 2) - this.padding,\n\t\t\t\tinnerWidth = this.width - (this.xScalePaddingLeft + this.xScalePaddingRight),\n\t\t\t\tvalueWidth = innerWidth/Math.max((this.valuesCount - ((this.offsetGridLines) ? 0 : 1)), 1),\n\t\t\t\tvalueOffset = (valueWidth * index) + this.xScalePaddingLeft;\n\n\t\t\tif (this.offsetGridLines){\n\t\t\t\tvalueOffset += (valueWidth/2);\n\t\t\t}\n\n\t\t\treturn Math.round(valueOffset);\n\t\t},\n\t\tupdate : function(newProps){\n\t\t\thelpers.extend(this, newProps);\n\t\t\tthis.fit();\n\t\t},\n\t\tdraw : function(){\n\t\t\tvar ctx = this.ctx,\n\t\t\t\tyLabelGap = (this.endPoint - this.startPoint) / this.steps,\n\t\t\t\txStart = Math.round(this.xScalePaddingLeft);\n\t\t\tif (this.display){\n\t\t\t\tctx.fillStyle = this.textColor;\n\t\t\t\tctx.font = this.font;\n\t\t\t\teach(this.yLabels,function(labelString,index){\n\t\t\t\t\tvar yLabelCenter = this.endPoint - (yLabelGap * index),\n\t\t\t\t\t\tlinePositionY = Math.round(yLabelCenter),\n\t\t\t\t\t\tdrawHorizontalLine = this.showHorizontalLines;\n\n\t\t\t\t\tctx.textAlign = \"right\";\n\t\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\t\tif (this.showLabels){\n\t\t\t\t\t\tctx.fillText(labelString,xStart - 10,yLabelCenter);\n\t\t\t\t\t}\n\n\t\t\t\t\t// This is X axis, so draw it\n\t\t\t\t\tif (index === 0 && !drawHorizontalLine){\n\t\t\t\t\t\tdrawHorizontalLine = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (drawHorizontalLine){\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (index > 0){\n\t\t\t\t\t\t// This is a grid line in the centre, so drop that\n\t\t\t\t\t\tctx.lineWidth = this.gridLineWidth;\n\t\t\t\t\t\tctx.strokeStyle = this.gridLineColor;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// This is the first line on the scale\n\t\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\t\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\t\t\t\t\t}\n\n\t\t\t\t\tlinePositionY += helpers.aliasPixel(ctx.lineWidth);\n\n\t\t\t\t\tif(drawHorizontalLine){\n\t\t\t\t\t\tctx.moveTo(xStart, linePositionY);\n\t\t\t\t\t\tctx.lineTo(this.width, linePositionY);\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t}\n\n\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(xStart - 5, linePositionY);\n\t\t\t\t\tctx.lineTo(xStart, linePositionY);\n\t\t\t\t\tctx.stroke();\n\t\t\t\t\tctx.closePath();\n\n\t\t\t\t},this);\n\n\t\t\t\teach(this.xLabels,function(label,index){\n\t\t\t\t\tvar xPos = this.calculateX(index) + aliasPixel(this.lineWidth),\n\t\t\t\t\t\t// Check to see if line/bar here and decide where to place the line\n\t\t\t\t\t\tlinePos = this.calculateX(index - (this.offsetGridLines ? 0.5 : 0)) + aliasPixel(this.lineWidth),\n\t\t\t\t\t\tisRotated = (this.xLabelRotation > 0),\n\t\t\t\t\t\tdrawVerticalLine = this.showVerticalLines;\n\n\t\t\t\t\t// This is Y axis, so draw it\n\t\t\t\t\tif (index === 0 && !drawVerticalLine){\n\t\t\t\t\t\tdrawVerticalLine = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (drawVerticalLine){\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (index > 0){\n\t\t\t\t\t\t// This is a grid line in the centre, so drop that\n\t\t\t\t\t\tctx.lineWidth = this.gridLineWidth;\n\t\t\t\t\t\tctx.strokeStyle = this.gridLineColor;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// This is the first line on the scale\n\t\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\t\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (drawVerticalLine){\n\t\t\t\t\t\tctx.moveTo(linePos,this.endPoint);\n\t\t\t\t\t\tctx.lineTo(linePos,this.startPoint - 3);\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t}\n\n\n\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\n\n\t\t\t\t\t// Small lines at the bottom of the base grid line\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(linePos,this.endPoint);\n\t\t\t\t\tctx.lineTo(linePos,this.endPoint + 5);\n\t\t\t\t\tctx.stroke();\n\t\t\t\t\tctx.closePath();\n\n\t\t\t\t\tctx.save();\n\t\t\t\t\tctx.translate(xPos,(isRotated) ? this.endPoint + 12 : this.endPoint + 8);\n\t\t\t\t\tctx.rotate(toRadians(this.xLabelRotation)*-1);\n\t\t\t\t\tctx.font = this.font;\n\t\t\t\t\tctx.textAlign = (isRotated) ? \"right\" : \"center\";\n\t\t\t\t\tctx.textBaseline = (isRotated) ? \"middle\" : \"top\";\n\t\t\t\t\tctx.fillText(label, 0, 0);\n\t\t\t\t\tctx.restore();\n\t\t\t\t},this);\n\n\t\t\t}\n\t\t}\n\n\t});\n\n\tChart.RadialScale = Chart.Element.extend({\n\t\tinitialize: function(){\n\t\t\tthis.size = min([this.height, this.width]);\n\t\t\tthis.drawingArea = (this.display) ? (this.size/2) - (this.fontSize/2 + this.backdropPaddingY) : (this.size/2);\n\t\t},\n\t\tcalculateCenterOffset: function(value){\n\t\t\t// Take into account half font size + the yPadding of the top value\n\t\t\tvar scalingFactor = this.drawingArea / (this.max - this.min);\n\n\t\t\treturn (value - this.min) * scalingFactor;\n\t\t},\n\t\tupdate : function(){\n\t\t\tif (!this.lineArc){\n\t\t\t\tthis.setScaleSize();\n\t\t\t} else {\n\t\t\t\tthis.drawingArea = (this.display) ? (this.size/2) - (this.fontSize/2 + this.backdropPaddingY) : (this.size/2);\n\t\t\t}\n\t\t\tthis.buildYLabels();\n\t\t},\n\t\tbuildYLabels: function(){\n\t\t\tthis.yLabels = [];\n\n\t\t\tvar stepDecimalPlaces = getDecimalPlaces(this.stepValue);\n\n\t\t\tfor (var i=0; i<=this.steps; i++){\n\t\t\t\tthis.yLabels.push(template(this.templateString,{value:(this.min + (i * this.stepValue)).toFixed(stepDecimalPlaces)}));\n\t\t\t}\n\t\t},\n\t\tgetCircumference : function(){\n\t\t\treturn ((Math.PI*2) / this.valuesCount);\n\t\t},\n\t\tsetScaleSize: function(){\n\t\t\t/*\n\t\t\t * Right, this is really confusing and there is a lot of maths going on here\n\t\t\t * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n\t\t\t *\n\t\t\t * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n\t\t\t *\n\t\t\t * Solution:\n\t\t\t *\n\t\t\t * We assume the radius of the polygon is half the size of the canvas at first\n\t\t\t * at each index we check if the text overlaps.\n\t\t\t *\n\t\t\t * Where it does, we store that angle and that index.\n\t\t\t *\n\t\t\t * After finding the largest index and angle we calculate how much we need to remove\n\t\t\t * from the shape radius to move the point inwards by that x.\n\t\t\t *\n\t\t\t * We average the left and right distances to get the maximum shape radius that can fit in the box\n\t\t\t * along with labels.\n\t\t\t *\n\t\t\t * Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n\t\t\t * on each side, removing that from the size, halving it and adding the left x protrusion width.\n\t\t\t *\n\t\t\t * This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n\t\t\t * and position it in the most space efficient manner\n\t\t\t *\n\t\t\t * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\t\t\t */\n\n\n\t\t\t// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n\t\t\t// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n\t\t\tvar largestPossibleRadius = min([(this.height/2 - this.pointLabelFontSize - 5), this.width/2]),\n\t\t\t\tpointPosition,\n\t\t\t\ti,\n\t\t\t\ttextWidth,\n\t\t\t\thalfTextWidth,\n\t\t\t\tfurthestRight = this.width,\n\t\t\t\tfurthestRightIndex,\n\t\t\t\tfurthestRightAngle,\n\t\t\t\tfurthestLeft = 0,\n\t\t\t\tfurthestLeftIndex,\n\t\t\t\tfurthestLeftAngle,\n\t\t\t\txProtrusionLeft,\n\t\t\t\txProtrusionRight,\n\t\t\t\tradiusReductionRight,\n\t\t\t\tradiusReductionLeft,\n\t\t\t\tmaxWidthRadius;\n\t\t\tthis.ctx.font = fontString(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily);\n\t\t\tfor (i=0;i<this.valuesCount;i++){\n\t\t\t\t// 5px to space the text slightly out - similar to what we do in the draw function.\n\t\t\t\tpointPosition = this.getPointPosition(i, largestPossibleRadius);\n\t\t\t\ttextWidth = this.ctx.measureText(template(this.templateString, { value: this.labels[i] })).width + 5;\n\t\t\t\tif (i === 0 || i === this.valuesCount/2){\n\t\t\t\t\t// If we're at index zero, or exactly the middle, we're at exactly the top/bottom\n\t\t\t\t\t// of the radar chart, so text will be aligned centrally, so we'll half it and compare\n\t\t\t\t\t// w/left and right text sizes\n\t\t\t\t\thalfTextWidth = textWidth/2;\n\t\t\t\t\tif (pointPosition.x + halfTextWidth > furthestRight) {\n\t\t\t\t\t\tfurthestRight = pointPosition.x + halfTextWidth;\n\t\t\t\t\t\tfurthestRightIndex = i;\n\t\t\t\t\t}\n\t\t\t\t\tif (pointPosition.x - halfTextWidth < furthestLeft) {\n\t\t\t\t\t\tfurthestLeft = pointPosition.x - halfTextWidth;\n\t\t\t\t\t\tfurthestLeftIndex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (i < this.valuesCount/2) {\n\t\t\t\t\t// Less than half the values means we'll left align the text\n\t\t\t\t\tif (pointPosition.x + textWidth > furthestRight) {\n\t\t\t\t\t\tfurthestRight = pointPosition.x + textWidth;\n\t\t\t\t\t\tfurthestRightIndex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (i > this.valuesCount/2){\n\t\t\t\t\t// More than half the values means we'll right align the text\n\t\t\t\t\tif (pointPosition.x - textWidth < furthestLeft) {\n\t\t\t\t\t\tfurthestLeft = pointPosition.x - textWidth;\n\t\t\t\t\t\tfurthestLeftIndex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\txProtrusionLeft = furthestLeft;\n\n\t\t\txProtrusionRight = Math.ceil(furthestRight - this.width);\n\n\t\t\tfurthestRightAngle = this.getIndexAngle(furthestRightIndex);\n\n\t\t\tfurthestLeftAngle = this.getIndexAngle(furthestLeftIndex);\n\n\t\t\tradiusReductionRight = xProtrusionRight / Math.sin(furthestRightAngle + Math.PI/2);\n\n\t\t\tradiusReductionLeft = xProtrusionLeft / Math.sin(furthestLeftAngle + Math.PI/2);\n\n\t\t\t// Ensure we actually need to reduce the size of the chart\n\t\t\tradiusReductionRight = (isNumber(radiusReductionRight)) ? radiusReductionRight : 0;\n\t\t\tradiusReductionLeft = (isNumber(radiusReductionLeft)) ? radiusReductionLeft : 0;\n\n\t\t\tthis.drawingArea = largestPossibleRadius - (radiusReductionLeft + radiusReductionRight)/2;\n\n\t\t\t//this.drawingArea = min([maxWidthRadius, (this.height - (2 * (this.pointLabelFontSize + 5)))/2])\n\t\t\tthis.setCenterPoint(radiusReductionLeft, radiusReductionRight);\n\n\t\t},\n\t\tsetCenterPoint: function(leftMovement, rightMovement){\n\n\t\t\tvar maxRight = this.width - rightMovement - this.drawingArea,\n\t\t\t\tmaxLeft = leftMovement + this.drawingArea;\n\n\t\t\tthis.xCenter = (maxLeft + maxRight)/2;\n\t\t\t// Always vertically in the centre as the text height doesn't change\n\t\t\tthis.yCenter = (this.height/2);\n\t\t},\n\n\t\tgetIndexAngle : function(index){\n\t\t\tvar angleMultiplier = (Math.PI * 2) / this.valuesCount;\n\t\t\t// Start from the top instead of right, so remove a quarter of the circle\n\n\t\t\treturn index * angleMultiplier - (Math.PI/2);\n\t\t},\n\t\tgetPointPosition : function(index, distanceFromCenter){\n\t\t\tvar thisAngle = this.getIndexAngle(index);\n\t\t\treturn {\n\t\t\t\tx : (Math.cos(thisAngle) * distanceFromCenter) + this.xCenter,\n\t\t\t\ty : (Math.sin(thisAngle) * distanceFromCenter) + this.yCenter\n\t\t\t};\n\t\t},\n\t\tdraw: function(){\n\t\t\tif (this.display){\n\t\t\t\tvar ctx = this.ctx;\n\t\t\t\teach(this.yLabels, function(label, index){\n\t\t\t\t\t// Don't draw a centre value\n\t\t\t\t\tif (index > 0){\n\t\t\t\t\t\tvar yCenterOffset = index * (this.drawingArea/this.steps),\n\t\t\t\t\t\t\tyHeight = this.yCenter - yCenterOffset,\n\t\t\t\t\t\t\tpointPosition;\n\n\t\t\t\t\t\t// Draw circular lines around the scale\n\t\t\t\t\t\tif (this.lineWidth > 0){\n\t\t\t\t\t\t\tctx.strokeStyle = this.lineColor;\n\t\t\t\t\t\t\tctx.lineWidth = this.lineWidth;\n\n\t\t\t\t\t\t\tif(this.lineArc){\n\t\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\t\tctx.arc(this.xCenter, this.yCenter, yCenterOffset, 0, Math.PI*2);\n\t\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t\t} else{\n\t\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\t\tfor (var i=0;i<this.valuesCount;i++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tpointPosition = this.getPointPosition(i, this.calculateCenterOffset(this.min + (index * this.stepValue)));\n\t\t\t\t\t\t\t\t\tif (i === 0){\n\t\t\t\t\t\t\t\t\t\tctx.moveTo(pointPosition.x, pointPosition.y);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tctx.lineTo(pointPosition.x, pointPosition.y);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(this.showLabels){\n\t\t\t\t\t\t\tctx.font = fontString(this.fontSize,this.fontStyle,this.fontFamily);\n\t\t\t\t\t\t\tif (this.showLabelBackdrop){\n\t\t\t\t\t\t\t\tvar labelWidth = ctx.measureText(label).width;\n\t\t\t\t\t\t\t\tctx.fillStyle = this.backdropColor;\n\t\t\t\t\t\t\t\tctx.fillRect(\n\t\t\t\t\t\t\t\t\tthis.xCenter - labelWidth/2 - this.backdropPaddingX,\n\t\t\t\t\t\t\t\t\tyHeight - this.fontSize/2 - this.backdropPaddingY,\n\t\t\t\t\t\t\t\t\tlabelWidth + this.backdropPaddingX*2,\n\t\t\t\t\t\t\t\t\tthis.fontSize + this.backdropPaddingY*2\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\t\t\t\tctx.fillStyle = this.fontColor;\n\t\t\t\t\t\t\tctx.fillText(label, this.xCenter, yHeight);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, this);\n\n\t\t\t\tif (!this.lineArc){\n\t\t\t\t\tctx.lineWidth = this.angleLineWidth;\n\t\t\t\t\tctx.strokeStyle = this.angleLineColor;\n\t\t\t\t\tfor (var i = this.valuesCount - 1; i >= 0; i--) {\n\t\t\t\t\t\tvar centerOffset = null, outerPosition = null;\n\n\t\t\t\t\t\tif (this.angleLineWidth > 0 && (i % this.angleLineInterval === 0)){\n\t\t\t\t\t\t\tcenterOffset = this.calculateCenterOffset(this.max);\n\t\t\t\t\t\t\touterPosition = this.getPointPosition(i, centerOffset);\n\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\tctx.moveTo(this.xCenter, this.yCenter);\n\t\t\t\t\t\t\tctx.lineTo(outerPosition.x, outerPosition.y);\n\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.backgroundColors && this.backgroundColors.length == this.valuesCount) {\n\t\t\t\t\t\t\tif (centerOffset == null)\n\t\t\t\t\t\t\t\tcenterOffset = this.calculateCenterOffset(this.max);\n\n\t\t\t\t\t\t\tif (outerPosition == null)\n\t\t\t\t\t\t\t\touterPosition = this.getPointPosition(i, centerOffset);\n\n\t\t\t\t\t\t\tvar previousOuterPosition = this.getPointPosition(i === 0 ? this.valuesCount - 1 : i - 1, centerOffset);\n\t\t\t\t\t\t\tvar nextOuterPosition = this.getPointPosition(i === this.valuesCount - 1 ? 0 : i + 1, centerOffset);\n\n\t\t\t\t\t\t\tvar previousOuterHalfway = { x: (previousOuterPosition.x + outerPosition.x) / 2, y: (previousOuterPosition.y + outerPosition.y) / 2 };\n\t\t\t\t\t\t\tvar nextOuterHalfway = { x: (outerPosition.x + nextOuterPosition.x) / 2, y: (outerPosition.y + nextOuterPosition.y) / 2 };\n\n\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\tctx.moveTo(this.xCenter, this.yCenter);\n\t\t\t\t\t\t\tctx.lineTo(previousOuterHalfway.x, previousOuterHalfway.y);\n\t\t\t\t\t\t\tctx.lineTo(outerPosition.x, outerPosition.y);\n\t\t\t\t\t\t\tctx.lineTo(nextOuterHalfway.x, nextOuterHalfway.y);\n\t\t\t\t\t\t\tctx.fillStyle = this.backgroundColors[i];\n\t\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Extra 3px out for some label spacing\n\t\t\t\t\t\tvar pointLabelPosition = this.getPointPosition(i, this.calculateCenterOffset(this.max) + 5);\n\t\t\t\t\t\tctx.font = fontString(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily);\n\t\t\t\t\t\tctx.fillStyle = this.pointLabelFontColor;\n\n\t\t\t\t\t\tvar labelsCount = this.labels.length,\n\t\t\t\t\t\t\thalfLabelsCount = this.labels.length/2,\n\t\t\t\t\t\t\tquarterLabelsCount = halfLabelsCount/2,\n\t\t\t\t\t\t\tupperHalf = (i < quarterLabelsCount || i > labelsCount - quarterLabelsCount),\n\t\t\t\t\t\t\texactQuarter = (i === quarterLabelsCount || i === labelsCount - quarterLabelsCount);\n\t\t\t\t\t\tif (i === 0){\n\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t} else if(i === halfLabelsCount){\n\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t} else if (i < halfLabelsCount){\n\t\t\t\t\t\t\tctx.textAlign = 'left';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tctx.textAlign = 'right';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Set the correct text baseline based on outer positioning\n\t\t\t\t\t\tif (exactQuarter){\n\t\t\t\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\t\t\t} else if (upperHalf){\n\t\t\t\t\t\t\tctx.textBaseline = 'bottom';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tctx.textBaseline = 'top';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tctx.fillText(this.labels[i], pointLabelPosition.x, pointLabelPosition.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tChart.animationService = {\n\t\tframeDuration: 17,\n\t\tanimations: [],\n\t\tdropFrames: 0,\n\t\taddAnimation: function(chartInstance, animationObject) {\n\t\t\tfor (var index = 0; index < this.animations.length; ++ index){\n\t\t\t\tif (this.animations[index].chartInstance === chartInstance){\n\t\t\t\t\t// replacing an in progress animation\n\t\t\t\t\tthis.animations[index].animationObject = animationObject;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.animations.push({\n\t\t\t\tchartInstance: chartInstance,\n\t\t\t\tanimationObject: animationObject\n\t\t\t});\n\n\t\t\t// If there are no animations queued, manually kickstart a digest, for lack of a better word\n\t\t\tif (this.animations.length == 1) {\n\t\t\t\thelpers.requestAnimFrame.call(window, this.digestWrapper);\n\t\t\t}\n\t\t},\n\t\t// Cancel the animation for a given chart instance\n\t\tcancelAnimation: function(chartInstance) {\n\t\t\tvar index = helpers.findNextWhere(this.animations, function(animationWrapper) {\n\t\t\t\treturn animationWrapper.chartInstance === chartInstance;\n\t\t\t});\n\t\t\t\n\t\t\tif (index)\n\t\t\t{\n\t\t\t\tthis.animations.splice(index, 1);\n\t\t\t}\n\t\t},\n\t\t// calls startDigest with the proper context\n\t\tdigestWrapper: function() {\n\t\t\tChart.animationService.startDigest.call(Chart.animationService);\n\t\t},\n\t\tstartDigest: function() {\n\n\t\t\tvar startTime = Date.now();\n\t\t\tvar framesToDrop = 0;\n\n\t\t\tif(this.dropFrames > 1){\n\t\t\t\tframesToDrop = Math.floor(this.dropFrames);\n\t\t\t\tthis.dropFrames -= framesToDrop;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < this.animations.length; i++) {\n\n\t\t\t\tif (this.animations[i].animationObject.currentStep === null){\n\t\t\t\t\tthis.animations[i].animationObject.currentStep = 0;\n\t\t\t\t}\n\n\t\t\t\tthis.animations[i].animationObject.currentStep += 1 + framesToDrop;\n\t\t\t\tif(this.animations[i].animationObject.currentStep > this.animations[i].animationObject.numSteps){\n\t\t\t\t\tthis.animations[i].animationObject.currentStep = this.animations[i].animationObject.numSteps;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.animations[i].animationObject.render(this.animations[i].chartInstance, this.animations[i].animationObject);\n\t\t\t\t\n\t\t\t\t// Check if executed the last frame.\n\t\t\t\tif (this.animations[i].animationObject.currentStep == this.animations[i].animationObject.numSteps){\n\t\t\t\t\t// Call onAnimationComplete\n\t\t\t\t\tthis.animations[i].animationObject.onAnimationComplete.call(this.animations[i].chartInstance);\n\t\t\t\t\t// Remove the animation.\n\t\t\t\t\tthis.animations.splice(i, 1);\n\t\t\t\t\t// Keep the index in place to offset the splice\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar endTime = Date.now();\n\t\t\tvar delay = endTime - startTime - this.frameDuration;\n\t\t\tvar frameDelay = delay / this.frameDuration;\n\n\t\t\tif(frameDelay > 1){\n\t\t\t\tthis.dropFrames += frameDelay;\n\t\t\t}\n\n\t\t\t// Do we have more stuff to animate?\n\t\t\tif (this.animations.length > 0){\n\t\t\t\thelpers.requestAnimFrame.call(window, this.digestWrapper);\n\t\t\t}\n\t\t}\n\t};\n\n\t// Attach global event to resize each chart instance when the browser resizes\n\thelpers.addEvent(window, \"resize\", (function(){\n\t\t// Basic debounce of resize function so it doesn't hurt performance when resizing browser.\n\t\tvar timeout;\n\t\treturn function(){\n\t\t\tclearTimeout(timeout);\n\t\t\ttimeout = setTimeout(function(){\n\t\t\t\teach(Chart.instances,function(instance){\n\t\t\t\t\t// If the responsive flag is set in the chart instance config\n\t\t\t\t\t// Cascade the resize event down to the chart.\n\t\t\t\t\tif (instance.options.responsive){\n\t\t\t\t\t\tinstance.resize(instance.render, true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, 50);\n\t\t};\n\t})());\n\n\n\tif (amd) {\n\t\tdefine('Chart', [], function(){\n\t\t\treturn Chart;\n\t\t});\n\t} else if (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = Chart;\n\t}\n\n\troot.Chart = Chart;\n\n\tChart.noConflict = function(){\n\t\troot.Chart = previous;\n\t\treturn Chart;\n\t};\n\n}).call(this);\n","(function(){\n\t\"use strict\";\n\n\tvar root = this,\n\t\tChart = root.Chart,\n\t\thelpers = Chart.helpers;\n\n\n\n\tChart.Type.extend({\n\t\tname: \"Radar\",\n\t\tdefaults:{\n\t\t\t//Boolean - Whether to show lines for each scale point\n\t\t\tscaleShowLine : true,\n\n\t\t\t//Boolean - Whether we show the angle lines out of the radar\n\t\t\tangleShowLineOut : true,\n\n\t\t\t//Boolean - Whether to show labels on the scale\n\t\t\tscaleShowLabels : false,\n\n\t\t\t// Boolean - Whether the scale should begin at zero\n\t\t\tscaleBeginAtZero : true,\n\n\t\t\t//String - Colour of the angle line\n\t\t\tangleLineColor : \"rgba(0,0,0,.1)\",\n\n\t\t\t//Number - Pixel width of the angle line\n\t\t\tangleLineWidth : 1,\n\n\t\t\t//Number - Interval at which to draw angle lines (\"every Nth point\")\n\t\t\tangleLineInterval: 1,\n\n\t\t\t//String - Point label font declaration\n\t\t\tpointLabelFontFamily : \"'Arial'\",\n\n\t\t\t//String - Point label font weight\n\t\t\tpointLabelFontStyle : \"normal\",\n\n\t\t\t//Number - Point label font size in pixels\n\t\t\tpointLabelFontSize : 10,\n\n\t\t\t//String - Point label font colour\n\t\t\tpointLabelFontColor : \"#666\",\n\n\t\t\t//Boolean - Whether to show a dot for each point\n\t\t\tpointDot : true,\n\n\t\t\t//Number - Radius of each point dot in pixels\n\t\t\tpointDotRadius : 3,\n\n\t\t\t//Number - Pixel width of point dot stroke\n\t\t\tpointDotStrokeWidth : 1,\n\n\t\t\t//Number - amount extra to add to the radius to cater for hit detection outside the drawn point\n\t\t\tpointHitDetectionRadius : 20,\n\n\t\t\t//Boolean - Whether to show a stroke for datasets\n\t\t\tdatasetStroke : true,\n\n\t\t\t//Number - Pixel width of dataset stroke\n\t\t\tdatasetStrokeWidth : 2,\n\n\t\t\t//Boolean - Whether to fill the dataset with a colour\n\t\t\tdatasetFill : true,\n\n\t\t\t//String - A legend template\n\t\t\tlegendTemplate : \"<ul class=\\\"<%=name.toLowerCase()%>-legend\\\"><% for (var i=0; i<datasets.length; i++){%><li><span class=\\\"<%=name.toLowerCase()%>-legend-icon\\\" style=\\\"background-color:<%=datasets[i].strokeColor%>\\\"></span><span class=\\\"<%=name.toLowerCase()%>-legend-text\\\"><%if(datasets[i].label){%><%=datasets[i].label%><%}%></span></li><%}%></ul>\"\n\n\t\t},\n\n\t\tinitialize: function(data){\n\t\t\tthis.PointClass = Chart.Point.extend({\n\t\t\t\tstrokeWidth : this.options.pointDotStrokeWidth,\n\t\t\t\tradius : this.options.pointDotRadius,\n\t\t\t\tdisplay: this.options.pointDot,\n\t\t\t\thitDetectionRadius : this.options.pointHitDetectionRadius,\n\t\t\t\tctx : this.chart.ctx\n\t\t\t});\n\n\t\t\tthis.datasets = [];\n\n\t\t\tthis.buildScale(data);\n\n\t\t\t//Set up tooltip events on the chart\n\t\t\tif (this.options.showTooltips){\n\t\t\t\thelpers.bindEvents(this, this.options.tooltipEvents, function(evt){\n\t\t\t\t\tvar activePointsCollection = (evt.type !== 'mouseout') ? this.getPointsAtEvent(evt) : [];\n\n\t\t\t\t\tthis.eachPoints(function(point){\n\t\t\t\t\t\tpoint.restore(['fillColor', 'strokeColor']);\n\t\t\t\t\t});\n\t\t\t\t\thelpers.each(activePointsCollection, function(activePoint){\n\t\t\t\t\t\tactivePoint.fillColor = activePoint.highlightFill;\n\t\t\t\t\t\tactivePoint.strokeColor = activePoint.highlightStroke;\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.showTooltip(activePointsCollection);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t//Iterate through each of the datasets, and build this into a property of the chart\n\t\t\thelpers.each(data.datasets,function(dataset){\n\n\t\t\t\tvar datasetObject = {\n\t\t\t\t\tlabel: dataset.label || null,\n\t\t\t\t\tfillColor : dataset.fillColor,\n\t\t\t\t\tstrokeColor : dataset.strokeColor,\n\t\t\t\t\tpointColor : dataset.pointColor,\n\t\t\t\t\tpointStrokeColor : dataset.pointStrokeColor,\n\t\t\t\t\tpoints : []\n\t\t\t\t};\n\n\t\t\t\tthis.datasets.push(datasetObject);\n\n\t\t\t\thelpers.each(dataset.data,function(dataPoint,index){\n\t\t\t\t\t//Add a new point for each piece of data, passing any required data to draw.\n\t\t\t\t\tvar pointPosition;\n\t\t\t\t\tif (!this.scale.animation){\n\t\t\t\t\t\tpointPosition = this.scale.getPointPosition(index, this.scale.calculateCenterOffset(dataPoint));\n\t\t\t\t\t}\n\t\t\t\t\tdatasetObject.points.push(new this.PointClass({\n\t\t\t\t\t\tvalue : dataPoint,\n\t\t\t\t\t\tlabel : data.labels[index],\n\t\t\t\t\t\tdatasetLabel: dataset.label,\n\t\t\t\t\t\tx: (this.options.animation) ? this.scale.xCenter : pointPosition.x,\n\t\t\t\t\t\ty: (this.options.animation) ? this.scale.yCenter : pointPosition.y,\n\t\t\t\t\t\tstrokeColor : dataset.pointStrokeColor,\n\t\t\t\t\t\tfillColor : dataset.pointColor,\n\t\t\t\t\t\thighlightFill : dataset.pointHighlightFill || dataset.pointColor,\n\t\t\t\t\t\thighlightStroke : dataset.pointHighlightStroke || dataset.pointStrokeColor\n\t\t\t\t\t}));\n\t\t\t\t},this);\n\n\t\t\t},this);\n\n\t\t\tthis.render();\n\t\t},\n\t\teachPoints : function(callback){\n\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\thelpers.each(dataset.points,callback,this);\n\t\t\t},this);\n\t\t},\n\n\t\tgetPointsAtEvent : function(evt){\n\t\t\tvar mousePosition = helpers.getRelativePosition(evt),\n\t\t\t\tfromCenter = helpers.getAngleFromPoint({\n\t\t\t\t\tx: this.scale.xCenter,\n\t\t\t\t\ty: this.scale.yCenter\n\t\t\t\t}, mousePosition);\n\n\t\t\tvar anglePerIndex = (Math.PI * 2) /this.scale.valuesCount,\n\t\t\t\tpointIndex = Math.round((fromCenter.angle - Math.PI * 1.5) / anglePerIndex),\n\t\t\t\tactivePointsCollection = [];\n\n\t\t\t// If we're at the top, make the pointIndex 0 to get the first of the array.\n\t\t\tif (pointIndex >= this.scale.valuesCount || pointIndex < 0){\n\t\t\t\tpointIndex = 0;\n\t\t\t}\n\n\t\t\tif (fromCenter.distance <= this.scale.drawingArea){\n\t\t\t\thelpers.each(this.datasets, function(dataset){\n\t\t\t\t\tactivePointsCollection.push(dataset.points[pointIndex]);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn activePointsCollection;\n\t\t},\n\n\t\tbuildScale : function(data){\n\t\t\tthis.scale = new Chart.RadialScale({\n\t\t\t\tdisplay: this.options.showScale,\n\t\t\t\tfontStyle: this.options.scaleFontStyle,\n\t\t\t\tfontSize: this.options.scaleFontSize,\n\t\t\t\tfontFamily: this.options.scaleFontFamily,\n\t\t\t\tfontColor: this.options.scaleFontColor,\n\t\t\t\tshowLabels: this.options.scaleShowLabels,\n\t\t\t\tshowLabelBackdrop: this.options.scaleShowLabelBackdrop,\n\t\t\t\tbackdropColor: this.options.scaleBackdropColor,\n\t\t\t\tbackgroundColors: this.options.scaleBackgroundColors,\n\t\t\t\tbackdropPaddingY : this.options.scaleBackdropPaddingY,\n\t\t\t\tbackdropPaddingX: this.options.scaleBackdropPaddingX,\n\t\t\t\tlineWidth: (this.options.scaleShowLine) ? this.options.scaleLineWidth : 0,\n\t\t\t\tlineColor: this.options.scaleLineColor,\n\t\t\t\tangleLineColor : this.options.angleLineColor,\n\t\t\t\tangleLineWidth : (this.options.angleShowLineOut) ? this.options.angleLineWidth : 0,\n        angleLineInterval: (this.options.angleLineInterval) ? this.options.angleLineInterval : 1,\n\t\t\t\t// Point labels at the edge of each line\n\t\t\t\tpointLabelFontColor : this.options.pointLabelFontColor,\n\t\t\t\tpointLabelFontSize : this.options.pointLabelFontSize,\n\t\t\t\tpointLabelFontFamily : this.options.pointLabelFontFamily,\n\t\t\t\tpointLabelFontStyle : this.options.pointLabelFontStyle,\n\t\t\t\theight : this.chart.height,\n\t\t\t\twidth: this.chart.width,\n\t\t\t\txCenter: this.chart.width/2,\n\t\t\t\tyCenter: this.chart.height/2,\n\t\t\t\tctx : this.chart.ctx,\n\t\t\t\ttemplateString: this.options.scaleLabel,\n\t\t\t\tlabels: data.labels,\n\t\t\t\tvaluesCount: data.datasets[0].data.length\n\t\t\t});\n\n\t\t\tthis.scale.setScaleSize();\n\t\t\tthis.updateScaleRange(data.datasets);\n\t\t\tthis.scale.buildYLabels();\n\t\t},\n\t\tupdateScaleRange: function(datasets){\n\t\t\tvar valuesArray = (function(){\n\t\t\t\tvar totalDataArray = [];\n\t\t\t\thelpers.each(datasets,function(dataset){\n\t\t\t\t\tif (dataset.data){\n\t\t\t\t\t\ttotalDataArray = totalDataArray.concat(dataset.data);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\thelpers.each(dataset.points, function(point){\n\t\t\t\t\t\t\ttotalDataArray.push(point.value);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn totalDataArray;\n\t\t\t})();\n\n\n\t\t\tvar scaleSizes = (this.options.scaleOverride) ?\n\t\t\t\t{\n\t\t\t\t\tsteps: this.options.scaleSteps,\n\t\t\t\t\tstepValue: this.options.scaleStepWidth,\n\t\t\t\t\tmin: this.options.scaleStartValue,\n\t\t\t\t\tmax: this.options.scaleStartValue + (this.options.scaleSteps * this.options.scaleStepWidth)\n\t\t\t\t} :\n\t\t\t\thelpers.calculateScaleRange(\n\t\t\t\t\tvaluesArray,\n\t\t\t\t\thelpers.min([this.chart.width, this.chart.height])/2,\n\t\t\t\t\tthis.options.scaleFontSize,\n\t\t\t\t\tthis.options.scaleBeginAtZero,\n\t\t\t\t\tthis.options.scaleIntegersOnly\n\t\t\t\t);\n\n\t\t\thelpers.extend(\n\t\t\t\tthis.scale,\n\t\t\t\tscaleSizes\n\t\t\t);\n\n\t\t},\n\t\taddData : function(valuesArray,label){\n\t\t\t//Map the values array for each of the datasets\n\t\t\tthis.scale.valuesCount++;\n\t\t\thelpers.each(valuesArray,function(value,datasetIndex){\n\t\t\t\tvar pointPosition = this.scale.getPointPosition(this.scale.valuesCount, this.scale.calculateCenterOffset(value));\n\t\t\t\tthis.datasets[datasetIndex].points.push(new this.PointClass({\n\t\t\t\t\tvalue : value,\n\t\t\t\t\tlabel : label,\n\t\t\t\t\tdatasetLabel: this.datasets[datasetIndex].label,\n\t\t\t\t\tx: pointPosition.x,\n\t\t\t\t\ty: pointPosition.y,\n\t\t\t\t\tstrokeColor : this.datasets[datasetIndex].pointStrokeColor,\n\t\t\t\t\tfillColor : this.datasets[datasetIndex].pointColor\n\t\t\t\t}));\n\t\t\t},this);\n\n\t\t\tthis.scale.labels.push(label);\n\n\t\t\tthis.reflow();\n\n\t\t\tthis.update();\n\t\t},\n\t\tremoveData : function(){\n\t\t\tthis.scale.valuesCount--;\n\t\t\tthis.scale.labels.shift();\n\t\t\thelpers.each(this.datasets,function(dataset){\n\t\t\t\tdataset.points.shift();\n\t\t\t},this);\n\t\t\tthis.reflow();\n\t\t\tthis.update();\n\t\t},\n\t\tupdate : function(){\n\t\t\tthis.eachPoints(function(point){\n\t\t\t\tpoint.save();\n\t\t\t});\n\t\t\tthis.reflow();\n\t\t\tthis.render();\n\t\t},\n\t\treflow: function(){\n\t\t\thelpers.extend(this.scale, {\n\t\t\t\twidth : this.chart.width,\n\t\t\t\theight: this.chart.height,\n\t\t\t\tsize : helpers.min([this.chart.width, this.chart.height]),\n\t\t\t\txCenter: this.chart.width/2,\n\t\t\t\tyCenter: this.chart.height/2\n\t\t\t});\n\t\t\tthis.updateScaleRange(this.datasets);\n\t\t\tthis.scale.setScaleSize();\n\t\t\tthis.scale.buildYLabels();\n\t\t},\n\t\tdraw : function(ease){\n\t\t\tvar easeDecimal = ease || 1,\n\t\t\t\tctx = this.chart.ctx;\n\t\t\tthis.clear();\n\t\t\tthis.scale.draw();\n\n\t\t\thelpers.each(this.datasets,function(dataset){\n\n\t\t\t\t//Transition each point first so that the line and point drawing isn't out of sync\n\t\t\t\thelpers.each(dataset.points,function(point,index){\n\t\t\t\t\tif (point.hasValue()){\n\t\t\t\t\t\tpoint.transition(this.scale.getPointPosition(index, this.scale.calculateCenterOffset(point.value)), easeDecimal);\n\t\t\t\t\t}\n\t\t\t\t},this);\n\n\n\n\t\t\t\t//Draw the line between all the points\n\t\t\t\tctx.lineWidth = this.options.datasetStrokeWidth;\n\t\t\t\tctx.strokeStyle = dataset.strokeColor;\n\t\t\t\tctx.beginPath();\n\t\t\t\thelpers.each(dataset.points,function(point,index){\n\t\t\t\t\tif (index === 0){\n\t\t\t\t\t\tctx.moveTo(point.x,point.y);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tctx.lineTo(point.x,point.y);\n\t\t\t\t\t}\n\t\t\t\t},this);\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.stroke();\n\n\t\t\t\tctx.fillStyle = dataset.fillColor;\n\t\t\t\tif(this.options.datasetFill){\n\t\t\t\t\tctx.fill();\n\t\t\t\t}\n\t\t\t\t//Now draw the points over the line\n\t\t\t\t//A little inefficient double looping, but better than the line\n\t\t\t\t//lagging behind the point positions\n\t\t\t\thelpers.each(dataset.points,function(point){\n\t\t\t\t\tif (point.hasValue()){\n\t\t\t\t\t\tpoint.draw();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t},this);\n\n\t\t}\n\n\t});\n\n\n\n\n\n}).call(this);\n","'use strict';\n(function () {\n\n  var options = {\n    // Global defaults:\n    animation: false,\n\n    scaleOverride   : true,\n    scaleSteps      : 10,\n    scaleStepWidth  : 10,\n    scaleStartValue : 0,\n    scaleBeginAtZero: 0,\n\n    scaleLineColor : '#374140',\n    scaleFontFamily: '\"proxima-nova\", \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n    scaleFontColor : '#d9cb9e',\n\n    responsive: true,\n\n    tooltipFillColor : '#2a2c2b',\n    tooltipFontFamily: '\"proxima-nova\", \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n    tooltipFontColor : '#d9cb9e',\n\n    // Radar chart defaults:\n    angleLineColor      : '#374140',\n    pointLabelFontFamily: '\"proxima-nova\", \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n    pointLabelFontColor : '#d9cb9e',\n  };\n\n  var barCharts = document.querySelectorAll('.js-bar-chart');\n\n  barCharts.forEach(function (chart) {\n\n    var skill = chart.getAttribute('data-label');\n    var bars = chart.querySelectorAll('.js-bar-chart__bar');\n    var labels = [];\n    var values = [];\n\n    bars.forEach(function (bar) {\n      labels.push(bar.textContent);\n      values.push(bar.getAttribute('aria-valuenow'));\n    });\n\n    var context = document.getElementById('skills__chart--' + skill).getContext('2d');\n    var data = {\n      labels  : labels,\n      datasets: [{\n        label: skill,\n        data : values,\n\n        fillColor  : 'rgba(217,203,158,0.2)',\n        strokeColor: '#d9cb9e',\n\n        pointColor      : '#d9cb9e',\n        pointStrokeColor: '#d9cb9e',\n\n        pointHighlightFill  : '#db3522',\n        pointHighlightStroke: '#db3522',\n      }],\n    };\n\n    // Skills radar charts\n    /*global Chart:true*/\n    new Chart(context).Radar(data, options);\n  });\n\n})();\n"]}